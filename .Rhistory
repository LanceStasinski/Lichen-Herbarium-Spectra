par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
length(a.avg)
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:26
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 1:26
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,26), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 1:26
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,26), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 1:26
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,26), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
pls = readRDS('models/family.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = seq(1: length(a.avg))
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,length(a.avg)), main = 'Accuracy for Family',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
pls = readRDS('models/order.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = seq(1: length(a.avg))
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,length(a.avg)), main = 'Accuracy for Order',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
pls = readRDS('models/class.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = seq(1: length(a.avg))
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,length(a.avg)), main = 'Accuracy for Class',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "class",
ncomp = 4,
resampling = 'up',
n_iteration = 50,
include_age = F)
pls = classify(spectra = spectra,
className = "Class",
ncomp = 4,
resampling = 'up',
n_iteration = 50,
include_age = F)
pls = readRDS('models/class.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
hist(accuracy)
pls = readRDS('models/order.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
hist(accuracy)
pls = readRDS('models/family.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
hist(accuracy)
pls = readRDS('models/species.rds')
################################################################################
#Assess accuracy and kappa
################################################################################
accuracy = pls[[4]]
hist(accuracy)
species = readRDS('models/species.rds')[[4]]
species_age = readRDS('models/species_age.rds')[[4]]
hist(species_age)
hist(sqrt(species_age))
hist(log(species_age))
hist(species_age)
?t.test
t.tes(species, species_age)
t.test(species, species_age)
t.test(sqrt(species), sqrt(species_age))
family = readRDS('models/family.rds')[[4]]
family_age = readRDS('models/family_age.rds')[[4]]
t.test(family, family_age)
t.test(sqrt(family), sqrt(family_age))
order = readRDS('models/order.rds')[[4]]
order_age = readRDS('models/order_age.rds')[[4]]
t.test(order, order_age)
t.test(sqrt(order), sqrt(order_age))
class = readRDS('models/class.rds')[[4]]
class_age = readRDS('models/class_age.rds')[[4]]
t.test(class, class_age)
t.test(sqrt(class), sqrt(class_age))
hist(class_age)
hist(class)
hist(sqrt(class))
hist(sqrt(class_age))
hist(sqrt(order))
hist(sqrt(order_age))
hist(order)
hist(family)
hist(sqrt(family_age))
hist(sqrt(family))
hist(species)
hist(sqrt(species))
hist(species_age)
hist(sqrt(species_age))
t.test(sqrt(species), sqrt(species_age))
t.test(family, family_age)
t.test(order, order_age)
t.test(class, class_age)
library(spectrolab)
library(lme4)
library(nlme)
library(rlist)
library(optimx)
library(partR2)
#setup spectra
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(intercept)
partR2(intercept, data = spec_df, R2_type = "conditional", nboot = 10)
partR2(intercept, data = spec_df, R2_type = "marginal", nboot = 10)
summary(intercept)
partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
spectra = readRDS('spectra/lichen_spectra.rds')
#400:700
#701:1100
#1101:2400
spectra = spectra[,400:700 ]
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
spectra = spectra[,701:1100 ]
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(var_slope, data = spec_df, R2_type = "marginal", nboot = 10)
#setup spectra
spectra = readRDS('spectra/lichen_spectra.rds')
#400:700
#701:1100
#1101:2400
spectra = spectra[,701:1100 ]
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
AIC(intercept)
AIC(fixed_slope)
AIC(var_slope)
#setup spectra
spectra = readRDS('spectra/lichen_spectra.rds')
#400:700
#701:1100
#1101:2400
spectra = spectra[, 1400:2400 ]
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(var_slope, data = spec_df, R2_type = "marginal", nboot = 10)
AIC(m)
AIC(intercept)
AIC(fixed_slope)
AIC(var_slope)
spectra = readRDS('spectra/lichen_spectra.rds')
#400:700
#701:1100
#1101:2400
spectra = spectra[,700:1900 ]
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
intercept = lmer(normalization_magnitude ~ 1 + (1|scientificName), data = spec_df)
fixed_slope = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
var_slope = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
partR2(fixed_slope, data = spec_df, R2_type = "conditional", nboot = 10)
#partR2(fixed_slope, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(var_slope, data = spec_df, R2_type = "conditional", nboot = 10)
spectra = spectra[, seq(400, 2400, 50)]
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[, seq(400, 2400, 50)]
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "species",
ncomp = 4,
resampling = 'up',
n_iteration = 25,
include_age = F)
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 4,
resampling = 'up',
n_iteration = 25,
include_age = F)
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[, seq(400, 2400, 50)]
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 4,
resampling = 'up',
n_iteration = 25,
include_age = T)
pls[[1]]
pls[[1]][1]
d = pls[[1]][1]
View(d)
View(d[[1]])
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[, seq(400, 2400, 100)]
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 4,
resampling = 'up',
n_iteration = 25,
include_age = T)
d = pls[[1]][1]
View(d)
View(d[[1]])
4
4+6+2+4+6+4+6+4+4+2+4+2
11.5/48
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
pls = readRDS('models/species_age.rds')
#proportions
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
#plot confusion matrix
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
cl.pos = 'n',
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
addCoef.col = '#542788',
number.digits = 2,
number.cex = 1,
col = cols(10))
jpeg(filename = '../../lichen figures/species-age_corrplot.jpeg',
width = 10, height = 10, units = 'in', res = 1200)
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
cl.pos = 'n',
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
addCoef.col = '#542788',
number.digits = 2,
number.cex = 1,
col = cols(10))
dev.off()
jpeg(filename = '../../lichen figures/species-age_corrplot.jpeg',
width = 10, height = 10, units = 'in', res = 1200)
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
cl.pos = 'n',
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
addCoef.col = '#542788',
number.digits = 1,
number.cex = 1,
col = cols(10))
dev.off()
jpeg(filename = '../../lichen figures/species-age_corrplot.jpeg',
width = 12, height = 12, units = 'in', res = 1200)
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
cl.pos = 'n',
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
addCoef.col = '#542788',
number.digits = 2,
number.cex = 1,
col = cols(10))
dev.off()
jpeg(filename = '../../lichen figures/species-age_corrplot.jpeg',
width = 12, height = 12, units = 'in', res = 1200)
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
cl.pos = 'n',
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
addCoef.col = '#542788',
number.digits = 2,
number.cex = .7,
col = cols(10))
dev.off()
20 * 20
400*4
1600*6
