}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[14]])
#Order
par(mfrow = c(2,1))
##slopes
wv = seq(400, 2400, 10)
plot(wv, stats_list[[15]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (% reflectance/year)',
ylim = c(min(stats_list[[18]]), max(stats_list[[19]])),
main = 'Slopes - Order')
polygon(c(wv, rev(wv)), c(stats_list[[18]], rev(stats_list[[19]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[5]])){
lines(wv, stats_list[[5]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[15]])
##intercepts
wv = seq(400, 2400, 10)
plot(wv, stats_list[[14]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Intercept (% reflectance)',
ylim = c(min(stats_list[[2]]), max(stats_list[[17]])),
main = 'Intercepts - Order')
polygon(c(wv, rev(wv)), c(stats_list[[16]], rev(stats_list[[17]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[2]])){
lines(wv, stats_list[[2]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[14]])
par(mfrow = c(2,1))
##slopes
wv = seq(400, 2400, 10)
plot(wv, stats_list[[15]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (% reflectance/year)',
ylim = c(min(stats_list[[6]]), max(stats_list[[6]])),
main = 'Slopes - Class')
polygon(c(wv, rev(wv)), c(stats_list[[18]], rev(stats_list[[19]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[6]])){
lines(wv, stats_list[[6]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[15]])
##intercepts
wv = seq(400, 2400, 10)
plot(wv, stats_list[[14]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Intercept (% reflectance)',
ylim = c(min(stats_list[[3]]), max(stats_list[[3]])),
main = 'Intercepts - Class')
polygon(c(wv, rev(wv)), c(stats_list[[16]], rev(stats_list[[17]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[3]])){
lines(wv, stats_list[[3]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[14]])
wv = seq(400, 2400, 10)
plot(wv, stats_list[[15]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (% reflectance/year)',
ylim = c(min(stats_list[[6]]), max(stats_list[[6]])),
main = 'Slopes - Class')
polygon(c(wv, rev(wv)), c(stats_list[[18]], rev(stats_list[[19]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[6]])){
lines(wv, stats_list[[6]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[15]])
##intercepts
wv = seq(400, 2400, 10)
plot(wv, stats_list[[14]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Intercept (% reflectance)',
ylim = c(min(stats_list[[16]]), max(stats_list[[3]])),
main = 'Intercepts - Class')
polygon(c(wv, rev(wv)), c(stats_list[[16]], rev(stats_list[[17]])),
col = 'grey90',
lty = 0)
for (i in 1:nrow(stats_list[[3]])){
lines(wv, stats_list[[3]][i,], col = 'grey' )
}
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[14]])
par(mfrow = c(3,2))
##Family
wv = seq(400, 2400, 10)
plot(wv, stats_list[[7]],
ylim = c(min(stats_list[[7]]), max(stats_list[[7]])),
main = 'Variance - Family',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[10]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[10]], main = 'Slope variance - Family', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Order
wv = seq(400, 2400, 10)
plot(wv, stats_list[[8]],
ylim = c(min(stats_list[[8]]), max(stats_list[[8]])),
main = 'Variance - Order',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[11]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[11]], main = 'Slope variance - Order', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Class
wv = seq(400, 2400, 10)
plot(wv, stats_list[[9]],
ylim = c(min(stats_list[[9]]), max(stats_list[[9]])),
main = 'Variance - Class',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[12]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[12]], main = 'Slope variance - Class', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
par(mfrow = c(3,2))
##Family
wv = seq(400, 2400, 10)
plot(wv, stats_list[[7]],
ylim = c(min(stats_list[[7]]), max(stats_list[[7]])),
main = 'Variance - Family',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[10]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[10]], main = 'Slope variance - Family', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Order
wv = seq(400, 2400, 10)
plot(wv, stats_list[[8]],
ylim = c(min(stats_list[[13]]), max(stats_list[[13]])),
main = 'Variance - Order',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[11]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[11]], main = 'Slope variance - Order', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Class
wv = seq(400, 2400, 10)
plot(wv, stats_list[[9]],
ylim = c(min(stats_list[[9]]), max(stats_list[[9]])),
main = 'Variance - Class',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[12]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[12]], main = 'Slope variance - Class', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
par(mfrow = c(3,2))
##Family
wv = seq(400, 2400, 10)
plot(wv, stats_list[[7]],
ylim = c(min(stats_list[[7]]), max(stats_list[[7]])),
main = 'Variance - Family',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[10]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[10]], main = 'Slope variance - Family', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Order
wv = seq(400, 2400, 10)
plot(wv, stats_list[[8]],
ylim = c(0, max(stats_list[[13]])),
main = 'Variance - Order',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[11]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[11]], main = 'Slope variance - Order', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Class
wv = seq(400, 2400, 10)
plot(wv, stats_list[[9]],
ylim = c(min(stats_list[[9]]), max(stats_list[[9]])),
main = 'Variance - Class',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[12]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[12]], main = 'Slope variance - Class', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
par(mfrow = c(3,2))
##Family
wv = seq(400, 2400, 10)
plot(wv, stats_list[[7]],
ylim = c(0, max(stats_list[[7]])),
main = 'Variance - Family',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[10]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[10]], main = 'Slope variance - Family', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Order
wv = seq(400, 2400, 10)
plot(wv, stats_list[[8]],
ylim = c(0, max(stats_list[[13]])),
main = 'Variance - Order',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[11]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[11]], main = 'Slope variance - Order', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
##Class
wv = seq(400, 2400, 10)
plot(wv, stats_list[[9]],
ylim = c(min(stats_list[[9]]), max(stats_list[[9]])),
main = 'Variance - Class',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[12]], col = 'red')
lines(wv, stats_list[[13]], col = 'gray')
plot(wv, stats_list[[12]], main = 'Slope variance - Class', ylab = 'variance',
xlab = 'Wavelength (nm)', type = 'l')
par(mfrow = c(1,1))
wv = seq(400, 2400, 1)
plot(wv, stats_list[[10]],
ylim = c(min(stats_list[[10]], stats_list[[11]], stats_list[[12]]),
max(stats_list[[1]], stats_list[[11]], stats_list[[12]])),
main = 'Variance - Slopes',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = '#a6cee3',
type = 'l')
lines(wv, stats_list[[11]], col = '#1f78b4')
lines(wv, stats_list[[12]], col = '#b2df8a')
legend('topright',
c('Family', 'Order', 'Class'),
col = c('#a6cee3', '#1f78b4', '#b2df8a'), lty = c(1,1,1,1))
par(mfrow = c(1,1))
wv = seq(400, 2400, 10)
plot(wv, stats_list[[10]],
ylim = c(min(stats_list[[10]], stats_list[[11]], stats_list[[12]]),
max(stats_list[[1]], stats_list[[11]], stats_list[[12]])),
main = 'Variance - Slopes',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = '#a6cee3',
type = 'l')
lines(wv, stats_list[[11]], col = '#1f78b4')
lines(wv, stats_list[[12]], col = '#b2df8a')
legend('topright',
c('Family', 'Order', 'Class'),
col = c('#a6cee3', '#1f78b4', '#b2df8a'), lty = c(1,1,1,1))
par(mfrow = c(1,1))
wv = seq(400, 2400, 10)
plot(wv, stats_list[[10]],
ylim = c(min(stats_list[[10]], stats_list[[11]], stats_list[[12]]),
max(stats_list[[10]], stats_list[[11]], stats_list[[12]])),
main = 'Variance - Slopes',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = '#a6cee3',
type = 'l')
lines(wv, stats_list[[11]], col = '#1f78b4')
lines(wv, stats_list[[12]], col = '#b2df8a')
legend('topright',
c('Family', 'Order', 'Class'),
col = c('#a6cee3', '#1f78b4', '#b2df8a'), lty = c(1,1,1,1))
wv = seq(400, 2400, 10)
plot(wv, stats_list[[7]],
ylim = c(min(stats_list[[7]], stats_list[[8]], stats_list[[9]]),
max(stats_list[[7]], stats_list[[8]], stats_list[[9]])),
main = 'Variance - Intercepts',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = '#a6cee3',
type = 'l')
lines(wv, stats_list[[8]], col = '#1f78b4')
lines(wv, stats_list[[9]], col = '#b2df8a')
legend('bottomright',
c('Family', 'Order', 'Class'),
col = c('#a6cee3', '#1f78b4', '#b2df8a'), lty = c(1,1,1,1))
lmm = lmer(spec_df[, '700'] ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm)
pls = readRDS('models/family.rds')
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
library(spectrolab)
spec = readRDS("spectra/lichen_spectra.rds")
# 15 years
spec15 = spec[meta(spec)$age <= 15, ]
spec30_1 = spec[meta(spec)$age > 15, ]
spec30 = spec30_1[meta(spec30_1)$age <= 30,]
spec45_1 = spec[meta(spec)$age > 30, ]
spec45 = spec45_1[meta(spec45_1)$age <= 45,]
spec60_1 = spec[meta(spec)$age > 45, ]
spec60 = spec60_1[meta(spec60_1)$age <= 60,]
plot(mean(spec15), col = 'green')
plot(mean(spec30), col = 'darkgreen', add = T)
plot(mean(spec45), col = 'brown', add = T)
plot(mean(spec60), col = 'gray', add = T)
libary(caret)
library(caret)
citation(caret)
citation('caret')
library(spectrolab)
library(lme4)
library(nlme)
library(ggplot2)
library(ggeffects)
library(sjPlot)
library(rlist)
library(optimx)
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age <= 60, ]
data = meta(spectra)
spec.m = as.matrix(spectra) * 100
spectra_percent = as_spectra(spec.m)
meta(spectra_percent) = data
spec_df = as.data.frame(spectra_percent)
lmm1 = lmer(spec_df[, '700'] ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
lmm2 = lmer(spec_df[, x] ~ age + (age|Class/Order/Family),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm2)
lmm2 = lmer(spec_df[, '700'] ~ age + (age|Class/Order/Family),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm2)
summary(lmm1)
summary(lmm1)
summary(lmm2)
plot(lmm1)
plot(lmm2)
lmm1 = lmer(log(spec_df[, '700']) ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
plot(lmm1)
lmm1 = lmer(sqrt(spec_df[, '700']) ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
plot(lmm1)
spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
data = meta(spectra)
spec.m = as.matrix(spectra) * 100
spectra_percent = as_spectra(spec.m)
meta(spectra_percent) = data
spec_df = as.data.frame(spectra_percent)
lmm1 = lmer(spec_df[, '700'] ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
plot(lmm1)
lmm1 = lmer(log(spec_df[, '700']) ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
plot(lmm1)
hist(spec_df$age)
plot(spec_df$age, spec_df[, '700'])
m = lm(spec[, '700'] ~ spec$age)
m = lm(spec[, '700'] ~ spec_df$age)
m = lm(spec_df[, '700'] ~ spec_df$age)
plot(m)
plot(spec_df$age, spec_df[, '700'])
abline(m)
install.packages('forecast')
library(forecast)
BoxCox(spec_df[, '700'], lambda = 'auto')
lmm1 = lmer(BoxCox(spec_df[, '700'], lambda = 'auto') ~ age + (age|Class/Order/Family/scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
summary(lmm1)
plot(lmm1)
l = BoxCox.lambda(spec_df[, '700'])
l
b = BoxCox(spec_df[, '700'], lambda = 'auot')
b = BoxCox(spec_df[, '700'], lambda = 'auto')
invb = InvBoxCox(spec_df[, '700'], lambda = 'auto')
invb = InvBoxCox(spec_df[, '700'])
invb = InvBoxCox(spec_df[, '700'], lambda = l)
b
inb
invb
