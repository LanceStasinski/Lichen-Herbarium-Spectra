col = c(rgb(0,0,1,1), rgb(1,0,0,1)), lty = c(1,1))
#variances
wv = seq(400, 2400, 1)
plot(wv, stats_list[[2]],
ylim = c(min(stats_list[[2]]), max(stats_list[[2]])),
main = 'Random effects variance',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[3]], col = 'gray')
legend('topright',
c('Intercept', 'Residual'),
col = c('blue', 'gray'), lty = c(1,1,1))
#Random Variance explained
wv = seq(400, 2400, 1)
plot(wv, stats_list[[4]],
ylim = range(stats_list[[4]]),
main = 'Random effects variance explained by species',
ylab = 'Proportion of variance explained',
xlab = 'Wavelength (nm)',
type = 'l')
dev.off()
jpeg(filename = '../../lichen figures/fixedSlope_vn_results.jpeg',
width = 10, height = 8, units = 'in', res = 1200)
par(mfrow = c(2,3))
#slopes
wv = seq(400, 2400, 1)
plot(wv, stats_list[[6]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (normalized reflectance/year)',
ylim = c(min(stats_list[[9]]), max(stats_list[[10]])),
main = 'Fixed slope')
polygon(c(wv, rev(wv)), c(stats_list[[9]], rev(stats_list[[10]])),
col = 'grey90',
lty = 0)
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[6]])
#intercepts
wv = seq(400, 2400, 1)
plot(wv, stats_list[[5]],
type = 'l',
col = rgb(0,0,1,1),
xlab = 'Wavelength (nm)',
ylab = 'Intercept (normalized reflectance)',
ylim = c(min(stats_list[[1]]), max(stats_list[[1]])),
main = 'Intercepts')
for (i in 1:nrow(stats_list[[1]])){
lines(wv, stats_list[[1]][i,], col = 'grey70' )
}
polygon(c(wv, rev(wv)), c(stats_list[[7]], rev(stats_list[[8]])),
col = rgb(0,0,1,0.2),
lty = 0)
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[5]], col = rgb(0,0,1,1))
#marginal and conditional variances
wv = seq(400, 2400, 1)
plot(wv, stats_list[[11]],
type = 'l',
col = rgb(0,0,1,1),
xlab = 'Wavelength (nm)',
ylab = 'Proportion of variance explained',
ylim = c(0,1),
main = 'Conditional and Marginal R2')
polygon(c(wv, rev(wv)), c(stats_list[[12]], rev(stats_list[[13]])),
col = rgb(0,0,1, 0.2),
lty = 0)
lines(wv, stats_list[[14]], col = rgb(1,0,0,1))
polygon(c(wv, rev(wv)), c(stats_list[[15]], rev(stats_list[[16]])),
col = rgb(1,0,0, 0.2),
lty = 0)
legend('topright',
c('Conditional R2', 'Marginal R2'),
col = c(rgb(0,0,1,1), rgb(1,0,0,1)), lty = c(1,1))
#variances
wv = seq(400, 2400, 1)
plot(wv, stats_list[[2]],
ylim = c(min(stats_list[[2]]), max(stats_list[[2]])),
main = 'Random effects variance',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[3]], col = 'gray')
legend('topright',
c('Intercept', 'Residual'),
col = c('blue', 'gray'), lty = c(1,1,1))
#Random Variance explained
wv = seq(400, 2400, 1)
plot(wv, stats_list[[4]],
ylim = range(stats_list[[4]]),
main = 'Random effects variance explained by species',
ylab = 'Proportion of variance explained',
xlab = 'Wavelength (nm)',
type = 'l')
dev.off()
jpeg(filename = '../../lichen figures/fixedSlope_vn_results.jpeg',
width = 10, height = 8, units = 'in', res = 1200)
par(mfrow = c(2,3))
#slopes
wv = seq(400, 2400, 1)
plot(wv, stats_list[[6]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (normalized reflectance/year)',
ylim = c(min(stats_list[[9]]), max(stats_list[[10]])),
main = 'Fixed slope')
polygon(c(wv, rev(wv)), c(stats_list[[9]], rev(stats_list[[10]])),
col = 'grey90',
lty = 0)
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[6]])
#intercepts
wv = seq(400, 2400, 1)
plot(wv, stats_list[[5]],
type = 'l',
col = rgb(0,0,1,1),
xlab = 'Wavelength (nm)',
ylab = 'Intercept (normalized reflectance)',
ylim = c(min(stats_list[[1]]), max(stats_list[[1]])),
main = 'Intercepts')
for (i in 1:nrow(stats_list[[1]])){
lines(wv, stats_list[[1]][i,], col = 'grey70' )
}
polygon(c(wv, rev(wv)), c(stats_list[[7]], rev(stats_list[[8]])),
col = rgb(0,0,1,0.2),
lty = 0)
abline(h = 0, lty = 2, col = 'blue')
lines(wv, stats_list[[5]], col = rgb(0,0,1,1))
#marginal and conditional variances
wv = seq(400, 2400, 1)
plot(wv, stats_list[[11]],
type = 'l',
col = rgb(0,0,1,1),
xlab = 'Wavelength (nm)',
ylab = 'Proportion of variance explained',
ylim = c(0,1),
main = 'Conditional and Marginal R2')
polygon(c(wv, rev(wv)), c(stats_list[[12]], rev(stats_list[[13]])),
col = rgb(0,0,1, 0.2),
lty = 0)
lines(wv, stats_list[[14]], col = rgb(1,0,0,1))
polygon(c(wv, rev(wv)), c(stats_list[[15]], rev(stats_list[[16]])),
col = rgb(1,0,0, 0.2),
lty = 0)
legend('topright',
c('Conditional R2', 'Marginal R2'),
col = c(rgb(0,0,1,1), rgb(1,0,0,1)), lty = c(1,1))
#variances
wv = seq(400, 2400, 1)
plot(wv, stats_list[[2]],
ylim = c(min(stats_list[[2]]), max(stats_list[[2]])),
main = 'Random effects variance',
ylab = 'Variance',
xlab = 'Wavelength (nm)',
col = 'blue',
type = 'l')
lines(wv, stats_list[[3]], col = 'gray')
legend('topright',
c('Intercept', 'Residual'),
col = c('blue', 'gray'), lty = c(1,1,1))
#Random Variance explained
wv = seq(400, 2400, 1)
plot(wv, stats_list[[4]],
ylim = range(stats_list[[4]]),
main = 'Random effects variance explained by species',
ylab = 'Proportion of variance explained',
xlab = 'Wavelength (nm)',
type = 'l')
dev.off()
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age <= 60, ]
spectra = normalize(spectra)
spectra = aggregate(spectra, meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
m = lm(normalization_magnitude ~ age, data = spec_df)
lmm = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
lmm2 = lmer(normalization_magnitude ~ age + (1 + age|scientificName),
data = spec_df, REML = T,
lmerControl(optimizer ='bobyqa', boundary.tol = 1e-5,
optCtrl = list(maxfun = 1e5)))
AIC(m)
AIC(lmm)
AIC(lmm2)
partR2(lmm, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(lmm, data = spec_df, R2_type = "conditional", nboot = 10)
#plot
library(ggeffects)
pred <- ggpredict(lmm, terms = c("age"))
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
library(sjPlot)
# Visualise random effects
(re.effects <- plot_model(lmm, type = "re", show.values = TRUE))
ggpredict(lmm, terms = c("age"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
theme_minimal()
pred <- ggpredict(lmm, terms = c("age"))
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
ggpredict(lmm, terms = c("age"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
theme_minimal()
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
ggpredict(lmm, terms = c("age"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
theme_minimal()
lmm = lmer(normalization_magnitude ~ age + (1|scientificName), data = spec_df)
partR2(lmm, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(lmm, data = spec_df, R2_type = "conditional", nboot = 10)
#plot
library(ggeffects)
pred <- ggpredict(lmm, terms = c("age"))
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
ggpredict(lmm, terms = c("age"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
theme_minimal()
ggpredict(lmm, terms = c("age", "scientificName"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
theme_minimal()
ggpredict(lmm, terms = c("age", "scientificName"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
scale_fill_manual(values = rep('gray90', 29)) +
theme_minimal()
ggpredict(lmm, terms = c("age", "scientificName"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
scale_fill_manual(values = rep('gray10', 29)) +
theme_minimal()
ggpredict(lmm, terms = c("age", "scientificName"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
scale_fill_manual(values = rep('white', 29)) +
theme_minimal()
ggpredict(lmm, terms = c("age", "scientificName"), type = "re") %>%
plot() +
labs(x = "Age", y = "Normalization Magnitude", title = "") +
scale_fill_manual(values = rep('', 29)) +
theme_minimal()
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
jpeg(filename = '../../lichen figures/normMag-age.jpeg',
width = 8, height = 6, units = 'in', res = 1200)
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
dev.off()
jpeg(filename = '../../lichen figures/normMag-age.jpeg',
width = 8, height = 4, units = 'in', res = 1200)
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
dev.off()
jpeg(filename = '../../lichen figures/normMag-age.jpeg',
width = 8, height = 3, units = 'in', res = 1200)
(ggplot(pred) +
geom_line(aes(x = x, y = predicted)) +          # slope
geom_ribbon(aes(x = x, ymin = predicted - std.error, ymax = predicted + std.error),
fill = "lightgrey", alpha = 0.5) +  # error band
geom_point(data = spec_df,
aes(x = age, y = normalization_magnitude)) + #, colour = scientificName)) +
labs(x = "Age", y = "Normalization magnitude",
title = "") +
theme_minimal()
)
dev.off()
partR2(lmm, data = spec_df, R2_type = "marginal", nboot = 10)
partR2(lmm, data = spec_df, R2_type = "conditional", nboot = 10)
summary(lmm)
15.092/(15.092 + 6.081)
pls = readRDS('models/species_age.rds')
################################################################################
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
pls = readRDS('models/species_age.rds')
vip_to_spec = function(x){
t.vip = t(x[,-1])
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
vip.list = pls[[1]]
par(mfrow = c(2,3))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
pls[1]
pls[[1]]
vip.list = pls[[1]]
vip.list[[1]]
x = vip.list[[1]]
View(x)
tx = t(x)
View(tx)
t.vip = t(x[,-1])
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
View(t.vip)
names(t.vip)[2002] = `2401`
names(t.vip)[2002] = '2401'
t.vip = t(x[,-1])
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
View(t.vip)
t.vip = t(x[,-1])
t.vip = as.data.frame(t.vip)
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
vip_to_spec = function(x){
t.vip = t(x[,-1])
t.vip = as.data.frame(t.vip)
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
vip.list = pls[[1]]
par(mfrow = c(2,3))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
vip.list = pls[[1]]
par(mfrow = c(5,6))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
jpeg(filename = '../../lichen figures/species_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(5,6))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
pls = readRDS('models/family_age.rds')
vip_to_spec = function(x){
t.vip = t(x[,-1])
t.vip = as.data.frame(t.vip)
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
jpeg(filename = '../../lichen figures/species_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(5,6))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
jpeg(filename = '../../lichen figures/family_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(5,6))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
jpeg(filename = '../../lichen figures/family_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(4,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
pls = readRDS('models/order_age.rds')
jpeg(filename = '../../lichen figures/order_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(4,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
vip_to_spec = function(x){
t.vip = t(x[,-1])
t.vip = as.data.frame(t.vip)
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
jpeg(filename = '../../lichen figures/order_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(4,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
jpeg(filename = '../../lichen figures/order_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(4,4))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
pls = readRDS('models/class_age.rds')
vip_to_spec = function(x){
t.vip = t(x[,-1])
t.vip = as.data.frame(t.vip)
names(t.vip)[names(t.vip) == 'age'] = 2401
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
jpeg(filename = '../../lichen figures/class_age_vip.jpeg',
width = 12, height = 10, units = 'in', res = 1200)
vip.list = pls[[1]]
par(mfrow = c(2,3))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
dev.off()
