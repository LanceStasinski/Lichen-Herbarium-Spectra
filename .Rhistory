uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[(length(sorted)-4):length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)), col = m$color, cex.names = 0.75)
}
fileNum = 1
startIdx = 1
endIdx = 12
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 10, height = 10, units = 'in', res = 1200)
par(las = 2, mfrow = c(3,4))
if (endIdx < length(vipList)) {
end = endIdx
} else {
end = length(vipList)
}
for (i in startIdx:end) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 12
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip(modelDirectory = 'revised pls/data/upsampling', saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
!TRUE
!FALSE
################################################################################
# PLS function
################################################################################
runPlsda = function(iteration, spectra, className, ncomp, resampling, include_age,
modelDirectory, accuracyDirectory, cmDirectory,
saveModelObject) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
require(MASS)
require(parallel)
#load spectra and convert to matrix and dataframe
spec_raw = spectra
spec_mat = as.matrix(spectra)
spec_df1 = as.data.frame(spec_raw)
#combine relavant metadata
spec_df2 = as.data.frame(spec_mat)
spec_df2 = cbind(spec_df2, spec_df1[className])
colnames(spec_df2)[colnames(spec_df2) == className] <- className
uniqueNames = unique(spec_df1[[className]])
if (include_age == TRUE) {
spec_df2$age = spec_df1$age
}
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df2[[className]],
p = .7,
list = FALSE
)
training <- spec_df2[inTrain,]
testing <- spec_df2[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
if (resampling == 'down') {
accFileName = paste(paste('accuracy', className, toString(iteration), sep = "_"),
"rds", sep = ".")
saveRDS(plsFit$results$Accuracy, paste(accuracyDirectory, accFileName,
sep = '/'))
}
#file name - change if you'd prefer a different file name
fileName = paste(paste('pls', className, resampling, toString(iteration), sep = "_"),
"rds", sep = ".")
if (saveModelObjec) {
saveRDS(plsFit, paste(modelDirectory, fileName, sep = "/"))
}
if (resampling == 'up') {
plsClasses = predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cmFileName = paste(paste('cm', toString(iteration), sep="_"), "rds",
sep = ".")
saveRDS(cm, paste(cmDirectory, cmFileName, sep = "/"))
}
}
saveRDS(runPlsda, "revised pls/functions/runPlsda.rds")
runPlsda = function(iteration, spectra, className, ncomp, resampling, include_age,
modelDirectory, accuracyDirectory, cmDirectory,
saveModelObject) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
require(MASS)
require(parallel)
#load spectra and convert to matrix and dataframe
spec_raw = spectra
spec_mat = as.matrix(spectra)
spec_df1 = as.data.frame(spec_raw)
#combine relavant metadata
spec_df2 = as.data.frame(spec_mat)
spec_df2 = cbind(spec_df2, spec_df1[className])
colnames(spec_df2)[colnames(spec_df2) == className] <- className
uniqueNames = unique(spec_df1[[className]])
if (include_age == TRUE) {
spec_df2$age = spec_df1$age
}
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df2[[className]],
p = .7,
list = FALSE
)
training <- spec_df2[inTrain,]
testing <- spec_df2[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
if (resampling == 'down') {
accFileName = paste(paste('accuracy', className, toString(iteration), sep = "_"),
"rds", sep = ".")
saveRDS(plsFit$results$Accuracy, paste(accuracyDirectory, accFileName,
sep = '/'))
}
#file name - change if you'd prefer a different file name
fileName = paste(paste('pls', className, resampling, toString(iteration), sep = "_"),
"rds", sep = ".")
if (saveModelObjec) {
saveRDS(plsFit, paste(modelDirectory, fileName, sep = "/"))
}
if (resampling == 'up') {
plsClasses = predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cmFileName = paste(paste('cm', toString(iteration), sep="_"), "rds",
sep = ".")
saveRDS(cm, paste(cmDirectory, cmFileName, sep = "/"))
}
}
saveRDS(runPlsda, "revised pls/functions/runPlsda.rds")
require(matrixStats)
?rowSds
m = matrix(nrow = 10)
m = m[1:5, ]
m = matrix(nrow = 10, ncol = 10)
m = m[1:5, ]
View(m)
################################################################################
getNComps = function(directory, ncomp) {
require(matrixStats)
models = list.files(path = directory)
accuracies = matrix(nrow = ncomp)
for(i in 1:length(models)) {
model = readRDS(paste(directory, models[i], sep = "/"))
accuracies = cbind(accuracies, as.matrix(model))
}
accuracies = accuracies[,-1]
meanAcc = as.matrix(rowMeans(accuracies))
sdAcc = as.matrix(rowSds(accuracies))
lowerSd = meanAcc - (2 * sdAcc)
meanAcc = meanAcc[1:which.max(meanAcc),]
#get accuracies less than two standard deviations of the highest mean accuracy
lowerMeans = meanAcc[meanAcc < lowerSd[which.max(meanAcc)]]
optimalComp = length(lowerMeans) + 1 #first component with an average
# accuracy within 2 sd of the component with the highest mean accuracy
return(optimalComp)
}
saveRDS(getNComps, "revised pls/functions/getNComps.rds")
?install.packages
#functions
runPlsda = readRDS("revised pls/functions/runPlsda.rds")
generatePLSData = function(spectra, className, includeAge, ncomps,
numIterations) {
#############
# Setup
#############
require(parallel)
#functions
runPlsda = readRDS("revised pls/functions/runPlsda.rds")
getNComps = readRDS("revised pls/functions/getNComps.rds")
getData = readRDS("revised pls/functions/getData.rds")
plotConfusionMatrix = readRDS("revised pls/functions/plotConfusionMatrix.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
# variables
if (includeAge) {
age = 'with-age'
} else {
age = 'no-age'
}
upSamplingDirectory = paste(className, age, 'upsampled-models', sep = '/' )
accuracyDirectory = paste(className, age, 'accuracies', sep = '/')
cmDirectory = paste(className, age, 'confusion-matrices', sep = '/')
metricsDirectory = paste(className, age, 'metrics', sep = '/')
cmFinalDirectory = paste(className, age, 'cm-final', sep = '/')
vipDirectory = paste(className, age, 'variable-importance', sep = '/')
#################################
# Classification - parallelized
#################################
# choose number of cores - this code chooses half the cores available on your
# machine
numCores = floor(detectCores()/2)
cluster = makeCluster(numCores)
iterations = seq(1, numIterations)
# this function will run PLSDA and save model objects into the specified directory
# the console will log a list of NULL values, don't worry about this
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = ncomps, resampling = "down",
include_age = includeAge, modelDirectory = '', saveModelObject = FALSE,
cmDirectory = "", accuracyDirectory = accuracyDirectory)
# get optimal number of components from downsampled model objects
optimalNumComps = getNComps(accuracyDirectory, ncomps)
# run plsda with upsampling with optimal number of components
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = optimalNumComps, resampling = "up",
include_age = includeAge, modelDirectory = upSamplingDirectory,
cmDirectory = cmDirectory, saveModelObject = TRUE)
##############################################################################
# Get data and plot confusion matrices and variable importance values
##############################################################################
# get overall accuracy, mean confusion matrix, and standard deviation (2)
# confusion matrix
data = getData(directory = cmDirectory, metricsDirectory = metricsDirectory,
className = className, includesAge = includeAge)
matrixName = paste(paste(className, age, data$ncomps, 'comps', sep = '_'),
'jpeg', sep = '.')
#plot confusion matrix as high resolution jpeg
plotConfusionMatrix(data$cmMean, directory = cmFinalDirectory,
fileName = matrixName)
#plot top 5 and bottom 5 variable importance values
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = vipDirectory,
baseFileName = paste(className, 'vip', sep = '_'))
}
saveRDS(generatePLSData, 'revised pls/functions/generatePLSData.rds')
generatePLSData = readRDS('revised pls/functions/generatePLSData.rds')
library(spectrolab)
spectra = readRDS("spectra/lichen_spectra.rds")
head(meta(spectra))
################################################################################
# Extract necessary data from model objects
################################################################################
getData = function(directory, metricsDirectory, className, includesAge) {
require(rlist)
matrices = list.files(path = directory)
cmList = list()
accuracies = c()
for (i in 1:length(matrices)) {
cm = readRDS(paste(directory, matrices[i], sep = '/'))
cmList = list.append(cmList, as.matrix(cm))
accuracies = append(accuracies, cm$overall[1])
}
cmMean = t(Reduce("+", cmList)/length(matrices))
cmMean = cmMean/rowSums(cmMean)
# get standard deviations
getSds = function(list){
n = length(list);
rc = dim(list[[1]]);
ar1 = array(unlist(list), c(rc, n));
round(apply(ar1, c(1, 2), sd), 2);
}
cmSD = t(getSds(cmList))
cmSD = cmSD/rowSums(cmSD)
rownames(cmSD) = rownames(as.matrix(cmList[[1]]))
colnames(cmSD) = colnames(as.matrix(cmList[[1]]))
metrics = list(accuracies = accuracies, overallAccuracy = mean(accuracies),
cmMean = cmMean, cmSD = cmSD, ncomps = length(matrices))
if (includesAge) {
age = 'with-age'
} else {
age = 'no-age'
}
fileName = paste(paste(className, age, 'metrics', sep = '_'), '.rds', sep = '.')
saveRDS(metrics, paste(metricsDirectory, fileName, sep = '/'))
return(metrics)
}
saveRDS(getData, "revised pls/functions/getData.rds")
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4)
spectra = readRDS("spectra/lichen_spectra.rds")
iterations = seq(1, numIterations)
iterations = seq(1, 4)
numCores = floor(detectCores()/2)
cluster = makeCluster(numCores)
className = 'Class'
ncomps = 4
includeAge = FALSE
accuracyDirectory = paste('Class', "no-age", 'accuracies', sep = '/')
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = ncomps, resampling = "down",
include_age = includeAge, modelDirectory = '', saveModelObject = FALSE,
cmDirectory = "", accuracyDirectory = accuracyDirectory)
#functions
runPlsda = readRDS("revised pls/functions/runPlsda.rds")
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = ncomps, resampling = "down",
include_age = includeAge, modelDirectory = '', saveModelObject = FALSE,
cmDirectory = "", accuracyDirectory = accuracyDirectory)
?checkForRemoteErrors
numIterations = 4
numCores = floor(detectCores()/2)
cluster = makeCluster(numCores)
iterations = seq(1, numIterations)
# this function will run PLSDA and save model objects into the specified directory
# the console will log a list of NULL values, don't worry about this
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = ncomps, resampling = "down",
include_age = includeAge, modelDirectory = '', saveModelObject = FALSE,
cmDirectory = "", accuracyDirectory = accuracyDirectory)
################################################################################
# PLS function
################################################################################
runPlsda = function(iteration, spectra, className, ncomp, resampling, include_age,
modelDirectory, accuracyDirectory, cmDirectory,
saveModelObject) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
require(MASS)
require(parallel)
#load spectra and convert to matrix and dataframe
spec_raw = spectra
spec_mat = as.matrix(spectra)
spec_df1 = as.data.frame(spec_raw)
#combine relavant metadata
spec_df2 = as.data.frame(spec_mat)
spec_df2 = cbind(spec_df2, spec_df1[className])
colnames(spec_df2)[colnames(spec_df2) == className] <- className
uniqueNames = unique(spec_df1[[className]])
if (include_age == TRUE) {
spec_df2$age = spec_df1$age
age = 'with-age'
} else {
age = 'no-age'
}
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df2[[className]],
p = .7,
list = FALSE
)
training <- spec_df2[inTrain,]
testing <- spec_df2[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
if (resampling == 'down') {
accFileName = paste(paste('accuracy', className, age, toString(iteration), sep = "_"),
"rds", sep = ".")
saveRDS(plsFit$results$Accuracy, paste(accuracyDirectory, accFileName,
sep = '/'))
}
#file name - change if you'd prefer a different file name
fileName = paste(paste('pls', className, age, resampling, toString(iteration), sep = "_"),
"rds", sep = ".")
if (saveModelObject) {
saveRDS(plsFit, paste(modelDirectory, fileName, sep = "/"))
}
if (resampling == 'up') {
plsClasses = predict(plsFit, newdata = testing)
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cmFileName = paste(paste('cm', toString(iteration), sep="_"), "rds",
sep = ".")
saveRDS(cm, paste(cmDirectory, cmFileName, sep = "/"))
}
}
saveRDS(runPlsda, "revised pls/functions/runPlsda.rds")
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4)
library(spectrolab)
spectra = readRDS("spectra/lichen_spectra.rds")
generatePLSData = readRDS('revised pls/functions/generatePLSData.rds')
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4)
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4)
generatePLSData = function(spectra, className, includeAge, ncomps,
numIterations, baseDirectory) {
#############
# Setup
#############
require(parallel)
#functions
runPlsda = readRDS("revised pls/functions/runPlsda.rds")
getNComps = readRDS("revised pls/functions/getNComps.rds")
getData = readRDS("revised pls/functions/getData.rds")
plotConfusionMatrix = readRDS("revised pls/functions/plotConfusionMatrix.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
# variables
if (includeAge) {
age = 'with-age'
} else {
age = 'no-age'
}
upSamplingDirectory = paste(baseDirectory, className, age, 'upsampled-models', sep = '/' )
accuracyDirectory = paste(baseDirectory, className, age, 'accuracies', sep = '/')
cmDirectory = paste(baseDirectory, className, age, 'confusion-matrices', sep = '/')
metricsDirectory = paste(baseDirectory, className, age, 'metrics', sep = '/')
cmFinalDirectory = paste(baseDirectory, className, age, 'cm-final', sep = '/')
vipDirectory = paste(baseDirectory, className, age, 'variable-importance', sep = '/')
#################################
# Classification - parallelized
#################################
# choose number of cores - this code chooses half the cores available on your
# machine
numCores = floor(detectCores()/2)
cluster = makeCluster(numCores)
iterations = seq(1, numIterations)
# this function will run PLSDA and save model objects into the specified directory
# the console will log a list of NULL values, don't worry about this
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = ncomps, resampling = "down",
include_age = includeAge, modelDirectory = '', saveModelObject = FALSE,
cmDirectory = "", accuracyDirectory = accuracyDirectory)
# get optimal number of components from downsampled model objects
optimalNumComps = getNComps(accuracyDirectory, ncomps)
# run plsda with upsampling with optimal number of components
parLapply(cl = cluster, iterations, runPlsda, spectra = spectra,
className = className, ncomp = optimalNumComps, resampling = "up",
include_age = includeAge, modelDirectory = upSamplingDirectory,
cmDirectory = cmDirectory, saveModelObject = TRUE)
##############################################################################
# Get data and plot confusion matrices and variable importance values
##############################################################################
# get overall accuracy, mean confusion matrix, and standard deviation (2)
# confusion matrix
data = getData(directory = cmDirectory, metricsDirectory = metricsDirectory,
className = className, includesAge = includeAge)
matrixName = paste(paste(className, age, data$ncomps, 'comps', sep = '_'),
'jpeg', sep = '.')
#plot confusion matrix as high resolution jpeg
plotConfusionMatrix(data$cmMean, directory = cmFinalDirectory,
fileName = matrixName)
#plot top 5 and bottom 5 variable importance values
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = vipDirectory,
baseFileName = paste(className, 'vip', sep = '_'))
}
saveRDS(generatePLSData, 'revised pls/functions/generatePLSData.rds')
spectra = readRDS("spectra/lichen_spectra.rds")
generatePLSData = readRDS('revised pls/functions/generatePLSData.rds')
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4, baseDirectory = base)
base = 'revised pls/output'
generatePLSData(spectra = spectra, className = 'Class', includeAge = F,
ncomps = 4, numIterations = 4, baseDirectory = base)
warnings()
generatePLSData(spectra = spectra, className = 'Class', includeAge = T,
ncomps = 4, numIterations = 4, baseDirectory = base)
