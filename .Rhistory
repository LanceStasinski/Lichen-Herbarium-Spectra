abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
which.max(a.avg)
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 32,
resampling = 'up',
n_iteration = 100,
include_age = TRUE)
saveRDS(pls, 'models/species_age.rds')
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
pls = readRDS('models/species.rds')
pls
View(pls)
pls[1]
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
################################################################################
#Caret PLSDA single function
##This function takes in spectra, the name of the column to be
#classified, the number of components to use, the type of resampling to be
#done ('up' or 'down'), and the number of iterations to complete. The function
#will return a list object that contains a list of matrices containing variable
#importance values for each species, a matrix of model accuracy
#(rows = components, columns = iteration), and vectors for overall accuracy and
#kappa statistics.
################################################################################
classify = function(spectra, className, ncomp, resampling, n_iteration, include_age) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
#load spectra and convert to matrix and dataframe
spec_all = spectra
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[[className]])
if (include_age == TRUE) {
spec_df$age = spec_all.df$age
}
##################
#Run PLSDA
##################
#create vectors, lists, and matrices to store metrics and variable importance
accuracy = c()
kappa = c()
a.fit = matrix(nrow = ncomp)
cm.list = list()
vip.list = list()
results = list()
model.list = list()
#create variable importance matrix for each class
for(j in 1:length(uniqueNames)){
name = paste(uniqueNames[j], "vip", sep = ".")
vip.list = list.append(vip.list, assign(name, matrix(nrow = ncol(spec_df)-1)))
}
#start of PLSDA code
for(i in 1:n_iteration){
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df[[className]],
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#variable importance
vip = varImp(plsFit)
for (k in 1:length(uniqueNames)) {
class.vip = assign(paste0(uniqueNames[k], i), vip$importance[uniqueNames[k]])
vip.list[[k]] = cbind(vip.list[[k]], get('class.vip'))
}
#accuracy objects for determining n components
a = assign(paste0('a', i), as.matrix(plsFit$results$Accuracy))
a.fit <- cbind(a.fit, get('a'))
#test model using the testing data partition (20% of data)
plsClasses <- predict(plsFit, newdata = testing)
#confusion/classification matrix objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
#append model to model.list
model.list = list.append(model.list, plsFit)
}
results = list.append(results, vip.list)
results = list.append(results, a.fit)
results = list.append(results, cm.list)
results = list.append(results, accuracy)
results = list.append(results, kappa)
results = list.append(results, model.list)
return(results)
}
saveRDS(classify, "functions/plsda.rds")
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
pls = readRDS('models/species_age.rds')
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
pls = readRDS('models/species_age.rds')
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
col = cols(10))
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 32,
resampling = 'up',
n_iteration = 100,
include_age = TRUE)
saveRDS(pls, 'models/species_age.rds')
warnings()
setwd("~/GitHub/Lichen-Herbarium-Spectra")
spectra = readRDS('spectra/lichen_spectra.rds')
uniqueNames = unique(meta(spectra)$scientificName)
classList = list()
classSpec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]#uniqueNames[1],]
library(spectrolab)
library(rlist)
spectra = readRDS('spectra/lichen_spectra.rds')
uniqueNames = unique(meta(spectra)$scientificName)
classList = list()
classSpec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]#uniqueNames[1],]
spec = as.data.frame(classSpec[,700])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
classSpec_df = as.data.frame(classSpec)
spec = as.data.frame(classSpec[,700])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
plot(spec$age, spec$reflectance)
plot(lm(reflectance~age, data = spec))
linear = lm(reflectance ~ age, data = spec)
logit = glm(reflectance ~ age, data = spec, family = binomial)
plot(spec$age,logit$fitted.values)
plot(spec$age, spec$reflectance)
lines(linear)
lines(linear$fitted.values)
plot(spec$age, spec$reflectance)
abline(linear$fitted.values)
abline(linear)
abline(logit, col = 'blue')
abline(linear, col = 'red')
abline(logit, col = 'blue')
AIC(logit)
AIC(linear)
sp = lm(reflectance ~ ns(age, df = 3), data = spec)
library(splines)
sp = lm(reflectance ~ ns(age, df = 3), data = spec)
abline(sp, col = 'green')
lines(x, predict(sp, data.frame(age = x)), col = 'green')
lines(spec$age, predict(sp, data.frame(age = x)), col = 'green')
x = seq(0, 120, 1)
lines(x, predict(sp, data.frame(age = x)), col = 'green')
sp = lm(reflectance ~ ns(age, df = 6), data = spec)
plot(spec$age, spec$reflectance)
abline(logit, col = 'blue')
x = seq(0, 120, 1)
lines(x, predict(sp, data.frame(age = x)), col = 'green')
hist(meta(spectra)$age)
plot(x, predict(logit, x, type="response"), col = 'blue')
plot(spec$age, spec$reflectance)
abline(linear, col = 'red')
x = seq(0, 120, 1)
lines(x, predict(logit, data.frame(age = x), type="response"), col = 'blue')
t.spec = spectra[meta(spectra)$age <= 60, ]
table(meta(spectra)$scientificName)
table(meta(t.spec)$scientificName)
d = meta(t.spec)
View(d)
length(t.spec[meta(t.spec)$scientificName == 'Xanthoparmelia_darrowii',])
length(t.spec[meta(t.spec)$scientificName == 'Peltigera_elisabethae',])
nrow(t.spec[meta(t.spec)$scientificName == 'Peltigera_elisabethae',])
nrow(meta(t.spec)$scientificName == 'Peltigera_elisabethae')
y=table(meta(t.spec)$scientificName)
y[1]
z = aggregate(t.spec, by = list(unique(meta(t.spec)$scientificName)), nrow, try_keep_txt(mean))
v = plot(spec$age, spec$reflectance)
abline(linear, col = 'red')
x = seq(0, 120, 1)
lines(x, predict(logit, data.frame(age = x), type="response"), col = 'blue')
lines(x, predict(sp, data.frame(age = x)), col = 'green')
v
seq(0, 60, 10)
20-9
seq(10, 60, 10)
for (i in i:seq(10, 60, 10)) {
return(i)
}
for (i in seq(10, 60, 10)) {
return(i)
}
nlist= c()
for (i in seq(10, 60, 10)) {
nlist = append(nlist, i)
return(nlist)
}
for (i in i:seq(10, 60, 10)) {
nlist = append(nlist, i)
return(nlist)
}
nlist= c()
for (i in i:seq(10, 60, 10)) {
nlist = append(nlist, i)
return(nlist)
}
for (i in seq(10, 60, 10)) {
print(i)
}
*
7*4
seq(10-9, 10, 1)
seq(60-9, 60, 1)
ageSpec = classSpec[meta(classSpec)$age == seq(10-9, 10, 1)]
ageSpec = classSpec[meta(classSpec)$age %in% seq(10-9, 10, 1)]
meta(ageSpec)
seq(9, 59, 10)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
lmp(linear)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age < 60,]
uniqueNames = unique(meta(spectra)$scientificName)
speciesList = list()
for(i in 1:length(uniqueNames)) {
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[i],]
#skip if time series has less than 12 specimens (12 specimens * 4 scans = 48)
if(nrow(classSpec) < 48) {
next
}
df.list = list()
#break age into 10 year intervals
for (j in seq(9, 59, 10)) {
ageSpec = classSpec[meta(classSpec)$age %in% seq(j-9, j, 1)]
ageSpec_df = as.data.frame(ageSpec)
#calculate slope for each wavelength
slope.list = c()
p.list = c()
for (y in 400:2400) {
spec = as.data.frame(ageSpec[,y])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
m = lm(reflectance ~ age, data = spec)
slope.list = append(slope.list, m$coefficients[2])
p.list = append(p.list, lmp(m))
}
slope = as.data.frame(slope.list)
colnames(slope) = c('reflectance')
slope$wavelength = seq(400, 2400, by = 1)
slope = cbind(slope, p.list)
#append df to list of dfs for this species
df.list = list.append(df.list, slope)
}
speciesList = list.append(speciesList, df.list)
}
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[1],]
nrow(classSpec)
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[3],]
nrow(classSpec)
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[2],]
nrow(classSpec)
classSpec_df = as.data.frame(classSpec)
nrow(classSpec_df)
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age < 60,]
uniqueNames = unique(meta(spectra)$scientificName)
speciesList = list()
for(i in 1:length(uniqueNames)) {
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[i],]
classSpec_df = as.data.frame(classSpec)
#skip if time series has less than 12 specimens (12 specimens * 4 scans = 48)
if(nrow(classSpec_df) < 48) {
next
}
df.list = list()
#break age into 10 year intervals
for (j in seq(9, 59, 10)) {
ageSpec = classSpec[meta(classSpec)$age %in% seq(j-9, j, 1)]
ageSpec_df = as.data.frame(ageSpec)
#calculate slope for each wavelength
slope.list = c()
p.list = c()
for (y in 400:2400) {
spec = as.data.frame(ageSpec[,y])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
m = lm(reflectance ~ age, data = spec)
slope.list = append(slope.list, m$coefficients[2])
p.list = append(p.list, lmp(m))
}
slope = as.data.frame(slope.list)
colnames(slope) = c('reflectance')
slope$wavelength = seq(400, 2400, by = 1)
slope = cbind(slope, p.list)
#append df to list of dfs for this species
df.list = list.append(df.list, slope)
}
speciesList = list.append(speciesList, df.list)
}
for(i in 1:length(uniqueNames)) {
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[i],]
classSpec_df = as.data.frame(classSpec)
#skip if time series has less than 12 specimens (12 specimens * 4 scans = 48)
if(nrow(classSpec_df) < 48) {
next
}
print(uniqueNames[i])
}
ageSpec = classSpec[meta(classSpec)$age %in% seq(9-9, 9, 1)]
ageSpec_df = as.data.frame(ageSpec)
#calculate slope for each wavelength
slope.list = c()
p.list = c()
for (y in 400:2400) {
spec = as.data.frame(ageSpec[,y])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
m = lm(reflectance ~ age, data = spec)
slope.list = append(slope.list, m$coefficients[2])
p.list = append(p.list, lmp(m))
}
warnings()
slope = as.data.frame(slope.list)
colnames(slope) = c('reflectance')
slope$wavelength = seq(400, 2400, by = 1)
slope = cbind(slope, p.list)
View(slope)
#append df to list of dfs for this species
df.list = list.append(df.list, slope)
speciesList = list.append(speciesList, df.list)
View(speciesList)
speciesList[[1]]
seq(9-9,9,1)
for(j in seq(9, 59, 10)){seq(j-9, 9, 1)}
for(j in seq(9, 59, 10)){seq(j-9, 9, 10)}
for(j in seq(9, 59, 10)){seq((j-9), 9, 1)}
for(j in seq(9, 59, 10)){seq((j-9), 9, 1)}
for(j in seq(9, 59, 10)){seq(j-9, j, 10)}
for(j in seq(9, 59, 10)){print(seq(j-9, j, 10))}
for(j in j:seq(9, 59, 10)){print(seq(j-9, j, 10))}
for(i in 1:length(uniqueNames)) {
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[i],]
classSpec_df = as.data.frame(classSpec)
#skip if time series has less than 12 specimens (12 specimens * 4 scans = 48)
if(nrow(classSpec_df) < 48) {
next
}
df.list = list()
#break age into 10 year intervals
for (j in seq(9, 59, 10)) {
ageSpec = classSpec[meta(classSpec)$age %in% seq(j-9, j, 1)]
ageSpec_df = as.data.frame(ageSpec)
#calculate slope for each wavelength
slope.list = c()
p.list = c()
for (y in 400:2400) {
spec = as.data.frame(ageSpec[,y])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
m = lm(reflectance ~ age, data = spec)
slope.list = append(slope.list, m$coefficients[2])
p.list = append(p.list, lmp(m))
}
slope = as.data.frame(slope.list)
colnames(slope) = c('reflectance')
slope$wavelength = seq(400, 2400, by = 1)
slope = cbind(slope, p.list)
#append df to list of dfs for this species
df.list = list.append(df.list, slope)
}
speciesList = list.append(speciesList, df.list)
}
ageSpec = classSpec[meta(classSpec)$age %in% seq(9-9, 9, 1)]
lmp <- function (modelobject) {
if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
f <- summary(modelobject)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
attributes(p) <- NULL
return(p)
}
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = spectra[meta(spectra)$age < 60,]
uniqueNames = unique(meta(spectra)$scientificName)
speciesList = list()
for(i in 1:length(uniqueNames)) {
classSpec = spectra[meta(spectra)$scientificName == uniqueNames[i],]
classSpec_df = as.data.frame(classSpec)
#skip if time series has less than 12 specimens (12 specimens * 4 scans = 48)
if(nrow(classSpec_df) < 48) {
next
}
df.list = list()
#break age into 10 year intervals
for (j in seq(15, 60, 15)) {
ageSpec = classSpec[meta(classSpec)$age %in% seq(j-14, j, 1)]
ageSpec_df = as.data.frame(ageSpec)
#calculate slope for each wavelength
slope.list = c()
p.list = c()
for (y in 400:2400) {
spec = as.data.frame(ageSpec[,y])
spec = cbind(spec, classSpec_df$age)
colnames(spec) = c('reflectance', 'age')
m = lm(reflectance ~ age, data = spec)
slope.list = append(slope.list, m$coefficients[2])
p.list = append(p.list, lmp(m))
}
slope = as.data.frame(slope.list)
colnames(slope) = c('reflectance')
slope$wavelength = seq(400, 2400, by = 1)
slope = cbind(slope, p.list)
#append df to list of dfs for this species
df.list = list.append(df.list, slope)
}
speciesList = list.append(speciesList, df.list)
}
