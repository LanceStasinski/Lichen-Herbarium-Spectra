for(j in 1:length(uniqueNames)){
name = paste(uniqueNames[j], "vip", sep = ".")
vip.list = list.append(vip.list, assign(name, matrix(nrow = ncol(spec_df)-1)))
}
#start of PLSDA code
for(i in 1:n_iteration){
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df[[className]],
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#variable importance
vip = varImp(plsFit)
for (k in 1:length(uniqueNames)) {
class.vip = assign(paste0(uniqueNames[k], i), vip$importance[uniqueNames[k]])
vip.list[[k]] = cbind(vip.list[[k]], get('class.vip'))
}
#accuracy objects for determining n components
a = assign(paste0('a', i), as.matrix(plsFit$results$Accuracy))
a.fit <- cbind(a.fit, get('a'))
#test model using the testing data partition (20% of data)
plsClasses <- predict(plsFit, newdata = testing)
#confusion/classification matrix objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
results = list.append(results, vip.list)
results = list.append(results, a.fit)
results = list.append(results, cm.list)
results = list.append(results, accuracy)
results = list.append(results, kappa)
return(results)
}
saveRDS(classify, "functions/plsda.rds")
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 50,
resampling = 'down',
n_iteration = 100,
include_age = TRUE)
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
################################################################################
#Accuracy values for choosing the optimal number of components to use
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:50
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,50), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
which.max(a.avg)
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 32,
resampling = 'up',
n_iteration = 100,
include_age = TRUE)
saveRDS(pls, 'models/species_age.rds')
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
pls = readRDS('models/species.rds')
pls
View(pls)
pls[1]
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
################################################################################
#Caret PLSDA single function
##This function takes in spectra, the name of the column to be
#classified, the number of components to use, the type of resampling to be
#done ('up' or 'down'), and the number of iterations to complete. The function
#will return a list object that contains a list of matrices containing variable
#importance values for each species, a matrix of model accuracy
#(rows = components, columns = iteration), and vectors for overall accuracy and
#kappa statistics.
################################################################################
classify = function(spectra, className, ncomp, resampling, n_iteration, include_age) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
#load spectra and convert to matrix and dataframe
spec_all = spectra
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[[className]])
if (include_age == TRUE) {
spec_df$age = spec_all.df$age
}
##################
#Run PLSDA
##################
#create vectors, lists, and matrices to store metrics and variable importance
accuracy = c()
kappa = c()
a.fit = matrix(nrow = ncomp)
cm.list = list()
vip.list = list()
results = list()
model.list = list()
#create variable importance matrix for each class
for(j in 1:length(uniqueNames)){
name = paste(uniqueNames[j], "vip", sep = ".")
vip.list = list.append(vip.list, assign(name, matrix(nrow = ncol(spec_df)-1)))
}
#start of PLSDA code
for(i in 1:n_iteration){
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df[[className]],
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#variable importance
vip = varImp(plsFit)
for (k in 1:length(uniqueNames)) {
class.vip = assign(paste0(uniqueNames[k], i), vip$importance[uniqueNames[k]])
vip.list[[k]] = cbind(vip.list[[k]], get('class.vip'))
}
#accuracy objects for determining n components
a = assign(paste0('a', i), as.matrix(plsFit$results$Accuracy))
a.fit <- cbind(a.fit, get('a'))
#test model using the testing data partition (20% of data)
plsClasses <- predict(plsFit, newdata = testing)
#confusion/classification matrix objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
#append model to model.list
model.list = list.append(model.list, plsFit)
}
results = list.append(results, vip.list)
results = list.append(results, a.fit)
results = list.append(results, cm.list)
results = list.append(results, accuracy)
results = list.append(results, kappa)
results = list.append(results, model.list)
return(results)
}
saveRDS(classify, "functions/plsda.rds")
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
pls = readRDS('models/species_age.rds')
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
pls = readRDS('models/species_age.rds')
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
col = cols(10))
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 32,
resampling = 'up',
n_iteration = 100,
include_age = TRUE)
saveRDS(pls, 'models/species_age.rds')
warnings()
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
spectra = readRDS('spectra/lichen_spectra.rds')
className = 'scientificName'
spec_all = spectra
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[[className]])
inTrain <- caret::createDataPartition(
y = spec_df[[className]],
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = 'down',
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = 2)
AIC(plsFit)
AIC(plsFit$modelInfo)
AIC(plsFit$finalModel)
plsFit$method
plsFit$modelInfo
plsFit$modelType
plsFit$results
plsFit$pred
plsFit$bestTune
plsFit$call
plsFit$dots
plsFit$metric
plsFit$control
AIC(plsFit$finalModel$model)
plsFit$finalModel$model
plsFit$finalModel$coefficients
plsFit$finalModel$projection
classify = function(spectra, className, ncomp, resampling, n_iteration, include_age) {
#require packages
require(spectrolab)
require(caret)
require(dplyr)
require(rlist)
require(matrixStats)
require(mlbench)
#load spectra and convert to matrix and dataframe
spec_all = spectra
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[[className]])
if (include_age == TRUE) {
spec_df$age = spec_all.df$age
}
##################
#Run PLSDA
##################
#create vectors, lists, and matrices to store metrics and variable importance
accuracy = c()
kappa = c()
a.fit = matrix(nrow = ncomp)
cm.list = list()
vip.list = list()
results = list()
model.list = list()
#create variable importance matrix for each class
for(j in 1:length(uniqueNames)){
name = paste(uniqueNames[j], "vip", sep = ".")
vip.list = list.append(vip.list, assign(name, matrix(nrow = ncol(spec_df)-1)))
}
#start of PLSDA code
for(i in 1:n_iteration){
#create data partition: 70% of data for training, 30% for testing
inTrain <- caret::createDataPartition(
y = spec_df[[className]],
p = .7,
list = FALSE
)
training <- spec_df[inTrain,]
testing <- spec_df[-inTrain,]
#tune model: 10-fold cross-validation repeated 3 times
ctrl <- trainControl(
method = "repeatedcv",
number = 10,
sampling = resampling,
repeats = 3)
#Fit model. Note max iterations set to 100000 to allow model convergence
plsFit <- train(
as.formula(paste(className, "~ .")),
data = training,
maxit = 100000,
method = "pls",
trControl = ctrl,
tuneLength = ncomp)
#variable importance
vip = varImp(plsFit)
for (k in 1:length(uniqueNames)) {
class.vip = assign(paste0(uniqueNames[k], i), vip$importance[uniqueNames[k]])
vip.list[[k]] = cbind(vip.list[[k]], get('class.vip'))
}
#accuracy objects for determining n components
a = assign(paste0('a', i), as.matrix(plsFit$results$Accuracy))
a.fit <- cbind(a.fit, get('a'))
#test model using the testing data partition (20% of data)
plsClasses <- predict(plsFit, newdata = testing)
#confusion/classification matrix objects to assess accuracy
cm = confusionMatrix(data = plsClasses, as.factor(testing[[className]]))
cm.m = assign(paste0("cm", i), as.matrix(cm))
cm.list <- list.append(cm.list, get('cm.m'))
ac <- assign(paste0('acc',i), cm$overall[1])
accuracy <- append(accuracy, get('ac'))
kap = assign(paste0("kap",i), cm$overall[2])
kappa <- append(kappa, get('kap'))
}
results = list.append(results, vip.list)
results = list.append(results, a.fit)
results = list.append(results, cm.list)
results = list.append(results, accuracy)
results = list.append(results, kappa)
return(results)
}
saveRDS(classify, "functions/plsda.rds")
gc()
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "scientificName",
ncomp = 32,
resampling = 'up',
n_iteration = 100,
include_age = TRUE)
saveRDS(pls, 'models/species_age.rds')
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
d = meta(spectra)
View(d)
pls = classify(spectra = spectra,
className = "Family",
ncomp = 60,
resampling = 'down',
n_iteration = 100,
include_age = F)
saveRDS(pls, 'models/family.rds')
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:50
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,50), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,50), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Family",
ncomp = 60,
resampling = 'up',
n_iteration = 100,
include_age = F)
saveRDS(pls, 'models/family.rds')
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
kappa = pls[[5]]
mean(kappa)
sd(kappa)
