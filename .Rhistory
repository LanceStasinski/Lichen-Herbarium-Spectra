split_3 = df3[df3$split3 == 2,]
table(split_3$scientificName)
tv = df[df$scientificName == "Trypethelium virens",]
hist(tv$year)
library(dplyr)
################################################################################
#remove bad samples
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
species_10 = c('Caloplaca flavovirescens', 'Candelaria concolor',
'Dimelaena oreina', 'Flavoparmelia caperata', 'Graphis scripta',
'Ionaspis lacustris', 'Peltigera elisabethae',
'Trypethelium virens', 'Umbilicaria muehlenbergii',
'Verrucaria fuscella')
#best two datasets to evaluate the 126 year interval
#course measurement of change with time but with broad taxonomic coverage
df10 = df[df$scientificName %in% species_10,]
#Fine measurement of change over 126 years with only one species
tv = df[df$scientificName == "Trypethelium virens",]
write.csv(df10, "metadata/ten_species_metadata.csv")
write.csv(tv, "metadata/T_virens_metadata.csv")
################################################################################
#time classes 1960-2012
################################################################################
df.new = df[df$year > 1960,]
length(unique(df.new$scientificName))
2012-1960
df.new10 = classify_time(df.new, time_name = "split10", n_classes = 10,
time_span = 52, start_year = 2012)
table(df.new10$split10)
df.new = classify_time(df.new, time_name = "split10", n_classes = 10,
time_span = 52, start_year = 2012)
df.new = classify_time(df.new, time_name = "split9", n_classes = 9,
time_span = 52, start_year = 2012)
df.new = classify_time(df.new, time_name = "split8", n_classes = 8,
time_span = 52, start_year = 2012)
df.new = classify_time(df.new, time_name = "split7", n_classes = 7,
time_span = 52, start_year = 2012)
df.new = classify_time(df.new, time_name = "split6", n_classes = 6,
time_span = 52, start_year = 2012)
df.new = classify_time(df.new, time_name = "split5", n_classes = 5,
time_span = 52, start_year = 2012)
table(df.new$split9)
2012-1970
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
################################################################################
#create time classes function
################################################################################
#function that creates n time classes and adds a column with those classes
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
df.new = df[df$year > 1970,]
df.new = classify_time(df.new, time_name = "split10", n_classes = 10,
time_span = 42, start_year = 2012)
df.new = classify_time(df.new, time_name = "split9", n_classes = 9,
time_span = 42, start_year = 2012)
df.new = classify_time(df.new, time_name = "split8", n_classes = 8,
time_span = 42, start_year = 2012)
df.new = classify_time(df.new, time_name = "split7", n_classes = 7,
time_span = 42, start_year = 2012)
df.new = classify_time(df.new, time_name = "split6", n_classes = 6,
time_span = 42, start_year = 2012)
df.new = classify_time(df.new, time_name = "split5", n_classes = 5,
time_span = 42, start_year = 2012)
table(df.new$split10)
df.new10 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
unique(df.new10$scientificName)
hist(df.new$year)
df.new9 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split9)) == 9)
df.new8 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
table(df.new8$split8)
unique(df.new8$scientificName)
df.new7 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split7)) == 7)
table(df.new7$split7)
df.new6 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split6)) == 6)
table(df.new6$split6)
length(unique(df.new6$scientificName))
df.new5 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split5)) == 5)
table(df.new5$split5)
table(df.new5[df.new5$split5 == 1,])
length(unique(df.new5$scientificName))
split_5_1 = df.new5[df.new5$split5 == 1,]
table(split_5_1$scientificName)
df.new4 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
df.new = classify_time(df.new, time_name = "split4", n_classes = 4,
time_span = 42, start_year = 2012)
df.new4 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
table(df.new4$split4)
split_4_1 = df.new4[df.new4$split4 == 1,]
table(split_4_1$scientificName)
a = as.data.frame(table(split_4_1$scientificName))$Freq
a
a = as.data.frame(table(split_4_1$scientificName))$Var1
a
a = as.data.frame(table(split_4_1$scientificName))
a
b = a[a$Freq > 2,]
b
split_4_2 = df.new4[df.new4$split4 == 2,]
table(split_4_2$scientificName)
b = b[-3,]
b
split_4_3 = df.new4[df.new4$split4 == 3,]
table(split_4_3$scientificName)
split_4_4 = df.new4[df.new4$split4 == 4,]
table(split_4_4$scientificName)
df.new = classify_time(df.new, time_name = "split3", n_classes = 3,
time_span = 42, start_year = 2012)
df.new3 = df.new %>% group_by(scientificName) %>%
filter(length(unique(split3)) == 3)
split_3_1 = as.data.frame(table(df.new3[df.new3$split3 == 1,]$scientificName))
split_3_1
split_3_1 = split_3_1[split_3_1$Freq > 3,]
split_3_1
split_3_1 = as.data.frame(table(df.new3[df.new3$split3 == 1,]$scientificName))
split_3_1 = split_3_1[split_3_1$Freq > 2,]
split_3_1
split_3_2 = as.data.frame(table(df.new3[df.new3$split3 == 2,]$scientificName))
split_3_2 = split_3_2[split_3_2$Freq > 2,]
split_3_2
split_3_3 = as.data.frame(table(df.new3[df.new3$split3 == 3,]$scientificName))
split_3_3 = split_3_3[split_3_3$Freq > 2,]
split_3_3
split_3_3$Var1
x = split_3_3$Var1
x = as.character(x)
a = as.character(split_3_1$Var1)
b = as.character(split_3_2$Var1)
c = as.character(split_3_3$Var1)
x = Reduce(cbind, list(a,b,c))
View(x)
dif_a.b = setdiff(a,b)
dif_b.a = setdiff(b,a)
a[!a %in% dif_a.b]
a
b = b[!b %in% dif_b.a]
split_3_1 = as.data.frame(table(df.new3[df.new3$split3 == 1,]$scientificName))
split_3_1 = split_3_1[split_3_1$Freq > 2,]
a = as.character(split_3_1$Var1)
split_3_2 = as.data.frame(table(df.new3[df.new3$split3 == 2,]$scientificName))
split_3_2 = split_3_2[split_3_2$Freq > 2,]
b = as.character(split_3_2$Var1)
split_3_3 = as.data.frame(table(df.new3[df.new3$split3 == 3,]$scientificName))
split_3_3 = split_3_3[split_3_3$Freq > 2,]
c = as.character(split_3_3$Var1)
a = intersect(a,b)
b = intersect(b,a)
c = intersect(c,a)
c
df_42 = df[df$scientificName %in% c,]
length(unique(df_42$Family))
length(unique(df_42$Order))
length(unique(df_42$Class))
42/3
table(df.new8$split8)
table(df.new7$split7)
table(df.new6$split6)
write.csv(df_42, "metadata/42_years_3_classes.csv")
hist(df.new6$scientificName)
barplot(df.new6$scientificName)
table(df.new6$scientificName)
table(df.new5$scientificName)
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
################################################################################
#create time classes function
################################################################################
#function that creates n time classes and adds a column with those classes
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
################################################################################
#time classes 1990-2012
################################################################################
df.new2 = df[df$year > 1990,]
################################################################################
#time classes 1990-2012
################################################################################
df.young = df[df$year > 1990,]
df.young = classify_time(df.young, time_name = "split10", n_classes = 10,
time_span = 20, start_year = 2010)
df.young10 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
################################################################################
#time classes 1990-2010
################################################################################
df.young = df[df$year > 1990,]
df.young10 = classify_time(df.young, time_name = "split10", n_classes = 10,
time_span = 20, start_year = 2010)
df.young10 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
################################################################################
#create time classes function
################################################################################
#function that creates n time classes and adds a column with those classes
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
df.young = df[df$year > 1990,]
df.young10 = classify_time(df.young, time_name = "split10", n_classes = 10,
time_span = 20, start_year = 2010)
df.young10 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
df.young = classify_time(df.young, time_name = "split10", n_classes = 10,
time_span = 20, start_year = 2010)
df.young10 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
df.young = classify_time(df.young, time_name = "split9", n_classes = 9,
time_span = 20, start_year = 2010)
df.young9 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split9)) == 9)
df.young = classify_time(df.young, time_name = "split8", n_classes = 8,
time_span = 20, start_year = 2010)
df.young = classify_time(df.young, time_name = "split8", n_classes = 8,
time_span = 20, start_year = 2010)
df.young8 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df.young8 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
################################################################################
#create time classes function
################################################################################
#function that creates n time classes and adds a column with those classes
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
df.young = classify_time(df.young, time_name = "split8", n_classes = 8,
time_span = 20, start_year = 2010)
df.young8 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
################################################################################
#time classes 1990-2010
################################################################################
df.young = df[df$year > 1990,]
df.young = classify_time(df.young, time_name = "split8", n_classes = 8,
time_span = 20, start_year = 2010)
df.young8 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df.young = classify_time(df.young, time_name = "split7", n_classes = 7,
time_span = 20, start_year = 2010)
df.young7 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split7)) == 7)
df.young = classify_time(df.young, time_name = "split6", n_classes = 6,
time_span = 20, start_year = 2010)
df.young6 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split6)) == 6)
df.young = classify_time(df.young, time_name = "split5", n_classes = 5,
time_span = 20, start_year = 2010)
df.young5 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split5)) == 5)
df.young = classify_time(df.young, time_name = "split4", n_classes = 4,
time_span = 20, start_year = 2010)
df.young4 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
table(df.young4$split4)
table(df.young4$scientificName)
df.young = classify_time(df.young, time_name = "split3", n_classes = 3,
time_span = 20, start_year = 2010)
df.young3 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split3)) == 3)
table(df.young3$split3)
table(df.young3$scientificName)
df.young = classify_time(df.young, time_name = "split2", n_classes = 2,
time_span = 20, start_year = 2010)
df.young2 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split2)) == 2)
table(df.young2$split2)
table(df.young2$scientificName)
split_2_1 = as.data.frame(table(df.young2[df.young2$split2 == 1,]$scientificName))
split_2_1 = split_2_1[split_2_1$Freq > 2,]
a = as.character(split_2_1$Var1)
split_2_2 = as.data.frame(table(df.young2[df.young2$split2 == 2,]$scientificName))
split_2_2 = split_2_2[split_2_2$Freq > 2,]
b = as.character(split_2_2$Var1)
a = intersect(a,b)
a
df_20 = df[df$scientificName %in% a,]
write.csv(df_20, "metadata/20_years_2_classes.csv")
length(unique(df_20$Family))
length(unique(df_20$Order))
length(unique(df_20$Class))
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
df.x = df[df$year > 2000,]
df.x = classify_time(df.x, time_name = "split10", n_classes = 10,
time_span = 10, start_year = 2010)
df.x10 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
df.x = classify_time(df.x, time_name = "split9", n_classes = 9,
time_span = 10, start_year = 2010)
df.x9 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split9)) == 9)
df.x = classify_time(df.x, time_name = "split8", n_classes = 8,
time_span = 10, start_year = 2010)
df.x8 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df.x = classify_time(df.x, time_name = "split7", n_classes = 7,
time_span = 10, start_year = 2010)
df.x7 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split7)) == 7)
df.x = classify_time(df.x, time_name = "split6", n_classes = 6,
time_span = 10, start_year = 2010)
df.x6 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split6)) == 6)
df.x = classify_time(df.x, time_name = "split5", n_classes = 5,
time_span = 10, start_year = 2010)
df.x5 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split5)) == 5)
df.x = classify_time(df.x, time_name = "split4", n_classes = 4,
time_span = 10, start_year = 2010)
df.x4 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
df.x = classify_time(df.x, time_name = "split3", n_classes = 3,
time_span = 10, start_year = 2010)
df.x3 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split3)) == 3)
df.x = classify_time(df.x, time_name = "split2", n_classes = 2,
time_span = 10, start_year = 2010)
df.x2 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split2)) == 2)
table(df.x2$scientificName)
library(dplyr)
################################################################################
#remove bad samples
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
table(df$scientificName)
species = as.data.frame(table(df$scientificName))
usable = species[species$Freq > 9,]
species.list = usable$Var1
species.list = as.character(usable$Var1)
df1 = df[df$scientificName == species.list[1],]
hist(df[df$scientificName == species.list[1],]$year)
?hist
hist(df[df$scientificName == species.list[1],]$year, main = species.list[1],
xlab = Year)
hist(df[df$scientificName == species.list[1],]$year, main = species.list[1],
xlab = "Year")
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year")
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10)
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960:2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960,2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960,2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 20, xlim = c(1960,2012))
}
2012-1960
126/2
species.list
species.2 = species.list[c(6,13),]
species.2 = species.list[6,13]
species.2 = species.list[c(6,13)]
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20)
}
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20, xlim = c(1880, 2020))
}
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20, xlim = c(1890, 2010))
}
df.15 = df[df$scientificName %in% species.list,]
length(unique(df.15$scientificName))
length(unique(df.15$Family))
length(unique(df.15$Order)
)
length(unique(df.15$Class))
species
