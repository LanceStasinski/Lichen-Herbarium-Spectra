importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueName[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
return(vipList)
}
getVip('revised pls/data/upsampling', '')
getVip = function(modelDirectory, saveDirectory) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
return(vipList)
}
getVip('revised pls/data/upsampling', '')
s = seq(1, 100, 1)
length(s)
length(s) - 5
"s" + 'x'
################################################################################
# Vip plots
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
for (i in startIdx:endIdx) {
vip_to_bar(vipList(i))
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
################################################################################
# Revised plsda workflow
################################################################################
# Setup
################################################################################
library(parallel)
#functions
runPlsda = readRDS("revised pls/functions/runPlsda.rds")
getNComps = readRDS("revised pls/functions/getNComps.rds")
getData = readRDS("revised pls/functions/getData.rds")
plotConfusionMatrix = readRDS("revised pls/functions/plotConfusionMatrix.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
#spectra
spectra = readRDS("spectra/lichen_spectra.rds")
# set the directories you would like the downsampled and upsampled model
# objects to be saved to. The upsampled models will be what you draw your
# conclusions from. The downsampled models will be used to determine the optimal
# number of components to use in the upsampling procedure
downSamplingDirectory = "revised pls/data/downsampling"
upSamplingDirectory = "revised pls/data/upsampling"
# set directory for confusion matrices - these will only be generated during the
# upsampling procedure. You can change the code in the 'plsda' file if you would
# like confusion matrices for both procedures
cmDirectory = "revised pls/data/confusion-matrices"
# choose class you are trying to classify - scientificName, family, order, or class
className = 'scientificName'
# include the effect of age in the model?
includeAge = FALSE
# number of components to start with. I'm arbitrarily choosing 40, but you can
# change this
ncomps = 4
# choose the number of iterations you want to run plsda for (I suggest 100)
numIterations = 4
################################################################################
# Vip plots
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
for (i in startIdx:endIdx) {
vip_to_bar(vipList(i))
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
for (i in startIdx:endIdx) {
vip_to_bar(vipList[i])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
################################################################################
# Vip plots
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
for (i in startIdx:endIdx) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip = readRDS("revised pls/functions/plotVip.rds")
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
par(las = 2, mfrow = 3, 5)
for (i in startIdx:endIdx) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
par(las = 2, mfrow = 3, 5)
for (i in startIdx:endIdx) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip(modelDirectory = upSamplingDirectory, saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
plotVip(modelDirectory = 'revised pls/data/upsampling', saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
################################################################################
# Vip plots
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 15
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
par(las = 2, mfrow = c(3,5))
for (i in startIdx:endIdx) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 15
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip(modelDirectory = 'revised pls/data/upsampling', saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
################################################################################
# Vip plots
################################################################################
plotVip = function(modelDirectory, saveDirectory, baseFileName) {
require(caret)
require(rlist)
models = list.files(path = modelDirectory)
firstModel = readRDS(paste(modelDirectory, models[1], sep = "/"))
importance = varImp(firstModel)$importance
uniqueNames = colnames(importance)
vipList = list()
for (i in 1:length(uniqueNames)) {
vipList = list.append(vipList, assign(uniqueNames[i],
matrix(nrow = nrow(importance))))
}
for (i in 1:length(models)) {
model = readRDS(paste(modelDirectory, models[i], sep = "/"))
vip = varImp(model)$importance
for (j in 1:length(uniqueNames)) {
vipList[[j]] = cbind(vipList[[j]], vip[uniqueNames[j]])
}
}
vip_to_bar = function(vip) {
vip = vip[, -1]
vip_mean = rowMeans(vip)
sorted = sort(vip_mean)
best = sorted[length(sorted)-5:length(sorted)]
bm = as.data.frame(as.matrix(rev(best)))
bm$color = '#d8b365'
worst = sorted[1:5]
wm = as.data.frame(as.matrix(rev(worst)))
wm$color = '#5ab4ac'
m = rbind(bm, wm)
barplot(rev(m[,1]), horiz = T, main = names(vip)[1],
names.arg = rev(rownames(m)) , col = m$color)
}
fileNum = 1
startIdx = 1
endIdx = 12
while (startIdx < length(vipList)) {
fileName = paste(paste(baseFileName, fileNum, sep = "_"), "jpeg", sep = ".")
jpeg(filename = paste(saveDirectory, fileName, sep = "/"),
width = 6, height = 8, units = 'in', res = 1200)
par(las = 2, mfrow = c(3,4))
for (i in startIdx:endIdx) {
vip_to_bar(vipList[[i]])
}
dev.off()
startIdx = endIdx + 1
endIdx = endIdx + 12
fileNum = fileNum + 1
}
}
saveRDS(plotVip, "revised pls/functions/plotVip.rds")
plotVip(modelDirectory = 'revised pls/data/upsampling', saveDirectory = "revised pls/images/vip_plots",
baseFileName = "testVip")
