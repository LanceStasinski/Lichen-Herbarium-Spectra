################################################################################
#clean meta data
data = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
data = data[!data$File.Name == "",]
data = data[!data$Quality == "BAD",]
data = data[!data$Quality == "Not Scanned, bad",]
data = data[!data$X.1 == 161, ]
rownames(data) = data$File.Name
#clean up spectra names
m = as.matrix(spec_all)
rownames(m) = gsub(".sig", "", rownames(m))
names(spec_all) = rownames(m)
spec_names = as.data.frame(rownames(m))
colnames(spec_names) = "spectra_ID"
#match data and scan names
idx2 = sapply(rownames(data), grep, spec_names$spectra_ID)
#remove data entries that do not have associated spectra
no_spectra = c("721604.1980", "815554.1991", "772360.1971", "691863.1963",
"941507.1998", "21435.1897", "673814.1974", "15239.1899",
"871614.2000", "14293.1899")
data = data[!rownames(data) %in% no_spectra,]
#match names again
idx2 = sapply(rownames(data), grep, spec_names$spectra_ID)
idx1 <- sapply(seq_along(idx2), function(i) rep(i, length(idx2[[i]])))
new_data = cbind(data[unlist(idx1),,drop=F], spec_names[unlist(idx2),,drop=F])
#Now remove repeated names in scan_names, then remove any names in the metadata
#that are not in the spectra names
data = read.csv("metadata/meta_full.csv", stringsAsFactors = F)
?duplicated
d = duplicated(spec_names)
d
dup = spec_names[duplicated(spec_names),]
dup
library(dplyr)
spec_names_no_dup = spec_names %>% distinct()
View(data)
rownames(data) = data[,1]
data = data[,-1]
data = read.csv("metadata/meta_full.csv", stringsAsFactors = F)
rownames(data) = data[,1]
data = data[,-c(1,2)]
View(spec_names_no_dup)
str(rownames(data))
str(spec_names_no_dup[1])
remove = base::setdiff(rownames(data), spec_names_no_dup$spectra_ID)
remove = base::setdiff(spec_names_no_dup$spectra_ID, rownames(data))
remove.data = base::setdiff(rownames(data), spec_names_no_dup$spectra_ID)
remove.spec = base::setdiff(spec_names_no_dup$spectra_ID, rownames(data))
spec_names_2 = spec_names_no_dup[!spec_names_no_dup$spectra_ID %in% remove.spec]
spec_names_2 = spec_names_no_dup[!spec_names_no_dup$spectra_ID %in% remove.spec ,]
data = data[!rownames(data) %in% remove.data, ]
names(spec_all)
rownames(spec_names_2)
spec_names_2
remove_spectra = base::setdiff(names(spec_all), spec_names_2)
length(names(spec_all))
1379-250
#remove duplicate spectra and spectra without metadata
names(spec_all) %>% distinct()
?distinct
distinct(names(spec_all))
duplicated(names(spec_all))
#remove duplicate spectra and spectra without metadata
spec_m = as.matrix(spec_all)
View(spec_m)
duplicated(rownames(spec_m))
spec_m2 = rownames(spec_m) %>% distinct()
spec_m2 = spec_m %>% distinct()
spec_m2 = as.numeric(rownames(spec_m)) %>% distinct()
spec_m2 = as.factor(rownames(spec_m)) %>% distinct()
spec_df = as.data.frame(spec_m)
spec_df = spec_df %>% distinct()
spec_new = as_spectra(spec_df)
remove_spectra = base::setdiff(names(spec_new), spec_names_2)
names(spec_new)
rownames(spec_df) = gsub("X", "", rownames(spec_df))
View(spec_df)
spec_new = as_spectra(spec_df)
remove_spectra = base::setdiff(names(spec_new), spec_names_2)
length(names(spec_new))
1363-250
spec_new = spec_new[!names(spec_new) %in% remove_spectra, ]
length(names(spec_new))
remove_meta = base::setdiff(rownames(data), names(spec_new))
data = data[!rownames(data) %in% remove_meta, ]
?meta
#set metadata in same order as spectra
data = data[names(spec_new),,drop = F]
rownames(data)
head(rownames(data))
head(names(spec_new))
#Finally, add the metadata
meta(spec_new) = data
a = spec_new[meta(spec_new)$scientificName == "Acarospora americana",]
meta(a)
saveRDS(spec_new, "lichen_spectra.rds")
vn = normalize(spec_new)
saveRDS(spec_new, "spectra/lichen_spectra.rds")
saveRDS(vn, "spectra/lichen_spectra_vn.rds")
length(names(spec_new))
library(spectrolab)
library(rlist)
library(dplyr)
spec_all = readRDS("spectra/spec_all.rds")
data = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
#Process the spectra: add metadata, trim spectra
################################################################################
#load packages
################################################################################
library(spectrolab)
library(rlist)
library(dplyr)
################################################################################
#clean spectra function
################################################################################
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900),
interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
################################################################################
#read in and clean spectra
################################################################################
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
#combine spectra into single spectra object
spec_all = Reduce(combine, spec_list)
#handle the peltigera spectra
spec24 = read_spectra(path = spec.dirs[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec24.1 = spec24[[1]]
spec24.2 = spec24[[2]]
spec24.1.1 = clean_spectra(spec24.1)
spec24.2.1 = clean_spectra(spec24.2)
#add peltigera spectra to full spectra
spec_all = Reduce(combine, list(spec_all, spec24.1.1, spec24.2.1))
#smooth
spec_all = smooth(spec_all)
saveRDS(spec_all, "spectra/spec_all.rds")
library(spectrolab)
library(rlist)
################################################################################
#clean spectra function
################################################################################
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900),
interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
################################################################################
#read in and clean spectra
################################################################################
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
#combine spectra into single spectra object
spec_all = Reduce(combine, spec_list)
#handle the peltigera spectra
spec24 = read_spectra(path = spec.dirs[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec24.1 = spec24[[1]]
spec24.2 = spec24[[2]]
spec24.1.1 = clean_spectra(spec24.1)
spec24.2.1 = clean_spectra(spec24.2)
#add peltigera spectra to full spectra
spec_all = Reduce(combine, list(spec_all, spec24.1.1, spec24.2.1))
#smooth
spec_all = smooth(spec_all)
saveRDS(spec_all, "spectra/spec_all.rds")
spec_all = readRDS("spectra/spec_all.rds")
data = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
View(data)
################################################################################
#match spectra and meta data names
################################################################################
#clean meta data
broken = data[data$File.Name == "", ]
View(broken)
broken$File.Name = paste(broken$X, broken$year, sep = ".")
data = data[!data$File.Name == "",]
data = cbind(data, broken)
data = rbind(data, broken)
################################################################################
#match spectra and meta data names
################################################################################
#add file names to entries with missing file names
broken = data[data$File.Name == "", ]
data = data[!data$Quality == "BAD",]
data = data[!data$Quality == "Not Scanned, bad",]
rownames(data) = data$File.Name
data = rownames(data) %>% distinct()
###############################################################################
library(spectrolab)
library(rlist)
library(dplyr)
data = rownames(data) %>% distinct()
data = data %>% distinct()
broken = data[data$File.Name == "", ]
broken$File.Name = paste(broken$X, broken$year, sep = ".")
data = data[!data$File.Name == "",]
data = rbind(data, broken)
#clean meta data
data = data[!data$Quality == "BAD",]
data = data[!data$Quality == "Not Scanned, bad",]
spec_all = readRDS("spectra/spec_all.rds")
data = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
################################################################################
#match spectra and meta data names
################################################################################
#add file names to entries with missing file names
broken = data[data$File.Name == "", ]
broken$File.Name = paste(broken$X, broken$year, sep = ".")
data = data[!data$File.Name == "",]
data = rbind(data, broken)
#clean meta data
data = data[!data$Quality == "BAD",]
data = data[!data$Quality == "Not Scanned, bad",]
data = data %>% distinct()
rownames(data) = data$File.Name
View(data)
data$name = paste(data$X, data$year, sep = ".")
rownames(data) = data$name
m = as.matrix(spec_all)
rownames(m) = gsub(".sig", "", rownames(m))
names(spec_all) = rownames(m)
spec_names = as.data.frame(rownames(m))
colnames(spec_names) = "spectra_ID"
#match data and scan names
idx2 = sapply(rownames(data), grep, spec_names$spectra_ID)
View(idx2)
str(idx2)
df = as.data.frame(idx2)
no_spectra = c("654463.1974", "721604.1980", "802685.1988", "815554.1991",
"22571.1892", "772360.1971", "934442.1993", "691863.1963",
"941507.1998", "21569.NA", "21435.1897", "673814.1974",
"15239.1899", "871614.2000", "14293.1899")
data = data[!rownames(data) %in% no_spectra,]
idx2 = sapply(rownames(data), grep, spec_names$spectra_ID)
idx1 <- sapply(seq_along(idx2), function(i) rep(i, length(idx2[[i]])))
new_data = cbind(data[unlist(idx1),,drop=F], spec_names[unlist(idx2),,drop=F])
#bring to excell to modify rownames to match spectra names
write.csv(new_data, "metadata/meta_full.csv")
data = read.csv("metadata/meta_full.csv", stringsAsFactors = F)
rownames(data) = data[,1]
data = data[,-c(1,2)]
#remove duplicate spectra names and spectra without metadata
spec_names_no_dup = spec_names %>% distinct()
remove.spec = base::setdiff(spec_names_no_dup$spectra_ID, rownames(data))
spec_names_2 = spec_names_no_dup[!spec_names_no_dup$spectra_ID %in% remove.spec,]
remove.data = base::setdiff(rownames(data), spec_names_no_dup$spectra_ID)
data = data[!rownames(data) %in% remove.data, ]
#remove duplicate spectra and spectra without metadata
spec_m = as.matrix(spec_all)
spec_df = as.data.frame(spec_m)
spec_df = spec_df %>% distinct()
rownames(spec_df) = gsub("X", "", rownames(spec_df))
spec_new = as_spectra(spec_df)
remove_spectra = base::setdiff(names(spec_new), spec_names_2)
spec_new = spec_new[!names(spec_new) %in% remove_spectra, ]
remove_meta = base::setdiff(rownames(data), names(spec_new))
data = data[!rownames(data) %in% remove_meta, ]
data = data[names(spec_new),,drop = F]
length(names(spec_new))
#Finally, add the metadata
meta(spec_new) = data
saveRDS(spec_new, "spectra/lichen_spectra.rds")
#vector normalize
vn = normalize(spec_new)
saveRDS(vn, "spectra/lichen_spectra_vn.rds")
################################################################################
library(spectrolab)
spec = readRDS("spectra/lichen_spectra.rds")
vn_spec = readRDS("spectra/lichen_spectra_vn.rds")
m = meta(spec)
View(m)
species = unique(meta(spec)$scientificName)
species[1]
species[4]
plot_spectra = function(spectra) {
species = unique(meta(spectra)$scientificName)
par(mfrow = c(5,6))
for (i in 1:length(species)){
plot(spectra[meta(spectra)$scientificName == species[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = species[i])
}
}
################################################################################
#plot
################################################################################
plot_spectra(spectra = spec)
plot_spectra = function(spectra) {
species = unique(meta(spectra)$scientificName)
par(mfrow = c(5,6))
for (i in 1:length(species)){
plot(spectra[meta(spectra)$scientificName == species[i],],
xlab = NA,
ylab = NA,
main = species[i])
}
}
################################################################################
#plot
################################################################################
plot_spectra(spectra = spec)
plot_spectra = function(spectra) {
species = unique(meta(spectra)$scientificName)
par(mfrow = c(5,6))
for (i in 1:length(species)){
plot(spectra[meta(spectra)$scientificName == species[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = species[i])
}
}
plot_spectra(spectra = vn_spec)
unique(m$Morphology)
################################################################################
#spec by growth form
################################################################################
meta(spec)$Morphology = gsub("Foliose", "foliose", meta(spec)$Morphology)
m2 = meta(spec)
unique(m2$Morphology)
meta(vn_spec)$Morphology = gsub("Foliose", "foliose", meta(vn_spec)$Morphology)
plot_spectra = function(spectra) {
growth = unique(meta(spectra)$Morphology)
par(mfrow = c(1,3))
for (i in 1:length(growth)){
plot(spectra[meta(spectra)$Morphology == growth[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = growth[i])
}
}
plot_spectra(spectra = spec)
plot_spectra = function(spectra) {
growth = unique(meta(spectra)$Morphology)
par(mfrow = c(2,2))
for (i in 1:length(growth)){
plot(spectra[meta(spectra)$Morphology == growth[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = growth[i])
}
}
plot_spectra(spectra = spec)
plot_spectra(spectra = vn_spec)
View(m2)
unique(meta(spec)$Order)
length(unique(meta(spec)$Order))
plot_spectra = function(spectra) {
order = unique(meta(spectra)$Order)
par(mfrow = c(4,4))
for (i in 1:length(order)){
plot(spectra[meta(spectra)$Order == order[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = order[i])
}
}
plot_spectra(spectra = spec)
plot_spectra(spectra = vn_spec)
plot_spectra = function(spectra) {
class = unique(meta(spectra)$Class)
par(mfrow = c(4,4))
for (i in 1:length(class)){
plot(spectra[meta(spectra)$Class == class[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = class[i])
}
}
plot_spectra(spectra = spec)
plot_spectra = function(spectra) {
class = unique(meta(spectra)$Class)
par(mfrow = c(3,2))
for (i in 1:length(class)){
plot(spectra[meta(spectra)$Class == class[i],],
xlab = "Wavelength (nm)",
ylab = "Reflectance",
main = class[i])
}
}
plot_spectra(spectra = spec)
plot_spectra(spectra = vn_spec)
################################################################################
#Data setup
################################################################################
spec_all = readRDS("spectra/lichen_spectra.rds")
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[className])
library(spectrolab)
library(caret)
library(dplyr)
library(mlbench)
library(corrplot)
library(matrixStats)
library(naniar)
library(rlist)
################################################################################
#Data setup
################################################################################
spec_all = readRDS("spectra/lichen_spectra.rds")
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
className = "scientificName"
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[className])
View(uniqueNames)
length(uniqueNames)
uniqueNames = unique(spec_all.df[[className]])
length(uniqueNames)
View(spec_df)
?paste0
for(i in 1:length(uniqueNames)){
paste(uniqueNames[i], ".vip") = matrix(nrow=2001)
}
for(i in 1:length(uniqueNames)){
paste(uniqueNames[i], ".vip")
}
vipName = c()
for(i in 1:length(uniqueNames)){
name = paste(uniqueNames[i], ".vip")
vipName = append(vipName, name)
}
uniqueNames = gsub(" ", "_", uniqueNames)
for(i in 1:length(uniqueNames)){
name = paste(uniqueNames[i], "vip", sep = ".")
vipName = append(vipName, name)
}
spec_all = readRDS("spectra/lichen_spectra.rds")
className = "scientificName"
spec_mat = as.matrix(spec_all)
spec_all.df = as.data.frame(spec_all)
#combine relevant meta data to matrix
spec_df = as.data.frame(spec_mat)
spec_df = cbind(spec_df, spec_all.df[className])
colnames(spec_df)[colnames(spec_df) == className] <- className
uniqueNames = unique(spec_all.df[[className]])
uniqueNames = gsub(" ", "_", uniqueNames)
vipName = c()
for(i in 1:length(uniqueNames)){
name = paste(uniqueNames[i], "vip", sep = ".")
vipName = append(vipName, name)
}
spec_all = readRDS("spectra/lichen_spectra.rds")
meta(spec_all)$Morphology = gsub("Foliose", "foliose", meta(spec_all)$Morphology)
meta(spec_all)$scientificName = gsub(" ","_", meta(spec_all)$scientificName)
meta(spec_all)
saveRDS(spec_all, "spectra/lichen_spectra.rds")
#vector normalize
vn = normalize(spec_all)
saveRDS(vn, "spectra/lichen_spectra_vn.rds")
