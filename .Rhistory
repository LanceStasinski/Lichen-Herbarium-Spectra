wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAic[[2]][x])
lines(wv, taxon$expon, lty = 1, col = 'red' )
lines(wv, taxon$spline, lty = 1, col = 'green')
}
par(mfrow = c(3,5))
for(x in 1:length(taxaAic[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
#ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$expon, lty = 1, col = 'red' )
#lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$spline, lty = 1, col = 'green')
}
head(taxaAIC[[1]][1])
head(as.data.frame(taxaAIC[[1]][1]))
head(as.data.frame(taxaAIC[[1]][2]))
View(taxaAIC)
View(taxaAic)
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$X)) < splineDF) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = 6))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 3, taxa = 'scientificName')
spec_df = as.data.frame(spectra)
taxa = 'scientificName'
par(mfrow = c(3,5))
for(x in 1:length(taxaAic[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
#ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$expon, lty = 1, col = 'red' )
#lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$spline, lty = 1, col = 'green')
}
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$X)) < splineDF) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 3, taxa = 'scientificName')
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$X)) < splineDF + 1) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 3, taxa = 'scientificName')
spec_df = as.data.frame(spectra)
species_spec = spec_df[spec_df[, 'scientificName'] == 'Acarospora_americana',]
sp = lm(species_spec[, 400] ~ ns(species_spec$age), df = 3)
sp = lm(species_spec[, 400] ~ ns(species_spec$age, df = 3))
AIC(sp)
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$X)) < splineDF + 2) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 3, taxa = 'scientificName')
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$age)) < splineDF) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 3, taxa = 'scientificName')
spec_df = as.data.frame(spectra)
taxa = 'scientificName'
par(mfrow = c(3,5))
for(x in 1:length(taxaAic[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
#ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$expon, lty = 1, col = 'red' )
#lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$spline, lty = 1, col = 'green')
}
par(mfrow = c(3,5))
for(x in 1:length(taxaAIC[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
#ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$expon, lty = 1, col = 'red' )
#lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$spline, lty = 1, col = 'green')
}
par(mfrow = c(3,5))
for(x in 1:length(taxaAIC[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$expon, lty = 1, col = 'red' )
lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$spline, lty = 1, col = 'green')
}
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$age)) < splineDF) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 6, taxa = 'scientificName')
spec_df = as.data.frame(spectra)
taxa = 'scientificName'
par(mfrow = c(3,5))
for(x in 1:length(taxaAIC[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$expon, lty = 1, col = 'red' )
lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$spline, lty = 1, col = 'green')
}
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$age)) < splineDF + 1) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 6, taxa = 'scientificName')
functionTypeComparison = function(spectra, splineDF, taxa){
spec_df = as.data.frame(spectra)
uniqueNames = unique(spec_df[, taxa])
completeList = list()
nameList = c()
fullAicList = list()
for (i in 1:length(uniqueNames)) {
species_spec = spec_df[spec_df[, taxa] == uniqueNames[i],]
if (length(unique(species_spec$age)) < splineDF + 2) {
next
}
nameList = append(nameList, uniqueNames[i])
lin_aic = c()
ex_aic = c()
sp_aic = c()
for(j in seq(400, 2400, 1)) {
wl = toString(j)
linear = lm(species_spec[, wl] ~ species_spec$age)
expon = lm(log(species_spec[, wl]) ~ species_spec$age)
sp = lm(species_spec[, wl] ~ ns(species_spec$age, df = splineDF))
lin_aic = append(lin_aic, AIC(linear))
ex_aic = append(ex_aic, AIC(expon))
sp_aic = append(sp_aic, AIC(sp))
}
taxonAIC = Reduce(cbind, list(lin_aic, ex_aic, sp_aic))
colnames(taxonAIC) = c('linear', 'expon', 'spline')
fullAicList = list.append(fullAicList, taxonAIC)
}
completeList = list.append(completeList, fullAicList)
completeList = list.append(completeList, nameList)
return(completeList)
}
spectra = readRDS('spectra/lichen_spectra.rds')
taxaAIC = functionTypeComparison(spectra = spectra, splineDF = 6, taxa = 'scientificName')
spec_df = as.data.frame(spectra)
taxa = 'scientificName'
par(mfrow = c(3,5))
for(x in 1:length(taxaAIC[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$expon, lty = 1, col = 'red' )
lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$spline, lty = 1, col = 'green')
}
par(mfrow = c(3,5))
for(x in 1:length(taxaAIC[[2]])) {
taxon = as.data.frame(taxaAIC[[1]][x])
max = max(c(max(taxon$linear), max(taxon$expon), max(taxon$spline)))
min = min(c(min(taxon$linear), min(taxon$expon), min(taxon$spline)))
wv = seq(400, 2400, 1)
#plot all: linear, exponential, spline
#plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylim = c(min, max),
#ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
#lines(wv, taxon$expon, lty = 1, col = 'red' )
#lines(wv, taxon$spline, lty = 1, col = 'green')
#plot linear and spline AIC
plot(wv, taxon$linear, type='l', lty = 1, col = 'blue', ylab = 'AIC', xlab = 'Wavelength (nm)', main = taxaAIC[[2]][x])
lines(wv, taxon$spline, lty = 1, col = 'green')
}
library(spectrolab)
library(rlist)
library(splines)
################################################################################
#comparison of functions - testing
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
spec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]
spec700 = spec[, 700]
spec_df = as.data.frame(spec)
spec_m = as.data.frame(as.matrix(spec700))
colnames(spec_m) =  'ref'
spec_m$age = spec_df$age
spec_m = spec_m[spec_m$age <= 60,]
linear = lm(ref~age, data = spec_m)
expon = lm(log(ref)~age, data = spec_m)
sp = lm(ref ~ ns(age, df = 6), data = spec_m)
timevalues <- seq(0, 123, 1)
expon2 <- exp(predict(expon, list(age=timevalues)))
linear2 = predict(linear, list(age=timevalues))
plot(spec_m$age, spec_m$ref, pch=16, xlab = "Age (years)", ylab = "Reflectance")
lines(timevalues, expon2,lwd=2, col = "red")
lines(timevalues, linear2, lwd=2, col = 'blue')
lines(timevalues, predict(sp, data.frame(age = timevalues)), col = 'green')
spectra = readRDS('spectra/lichen_spectra.rds')
spec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]
spec700 = spec[, 1200]
spec_df = as.data.frame(spec)
spec_m = as.data.frame(as.matrix(spec700))
colnames(spec_m) =  'ref'
spec_m$age = spec_df$age
spec_m = spec_m[spec_m$age <= 60,]
linear = lm(ref~age, data = spec_m)
expon = lm(log(ref)~age, data = spec_m)
sp = lm(ref ~ ns(age, df = 6), data = spec_m)
timevalues <- seq(0, 123, 1)
expon2 <- exp(predict(expon, list(age=timevalues)))
linear2 = predict(linear, list(age=timevalues))
plot(spec_m$age, spec_m$ref, pch=16, xlab = "Age (years)", ylab = "Reflectance")
lines(timevalues, expon2,lwd=2, col = "red")
lines(timevalues, linear2, lwd=2, col = 'blue')
lines(timevalues, predict(sp, data.frame(age = timevalues)), col = 'green')
spec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]
spec700 = spec[, 2000]
spec_df = as.data.frame(spec)
spec_m = as.data.frame(as.matrix(spec700))
colnames(spec_m) =  'ref'
spec_m$age = spec_df$age
spec_m = spec_m[spec_m$age <= 60,]
linear = lm(ref~age, data = spec_m)
expon = lm(log(ref)~age, data = spec_m)
sp = lm(ref ~ ns(age, df = 6), data = spec_m)
timevalues <- seq(0, 123, 1)
expon2 <- exp(predict(expon, list(age=timevalues)))
linear2 = predict(linear, list(age=timevalues))
plot(spec_m$age, spec_m$ref, pch=16, xlab = "Age (years)", ylab = "Reflectance")
#lines(timevalues, expon2,lwd=2, col = "red")
lines(timevalues, linear2, lwd=2, col = 'blue')
lines(timevalues, predict(sp, data.frame(age = timevalues)), col = 'green')
spectra = readRDS('spectra/lichen_spectra.rds')
spec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]
spec700 = spec[, 2000]
spec_df = as.data.frame(spec)
spec_m = as.data.frame(as.matrix(spec700))
colnames(spec_m) =  'ref'
spec_m$age = spec_df$age
#spec_m = spec_m[spec_m$age <= 60,]
linear = lm(ref~age, data = spec_m)
expon = lm(log(ref)~age, data = spec_m)
sp = lm(ref ~ ns(age, df = 6), data = spec_m)
timevalues <- seq(0, 123, 1)
expon2 <- exp(predict(expon, list(age=timevalues)))
linear2 = predict(linear, list(age=timevalues))
plot(spec_m$age, spec_m$ref, pch=16, xlab = "Age (years)", ylab = "Reflectance")
#lines(timevalues, expon2,lwd=2, col = "red")
lines(timevalues, linear2, lwd=2, col = 'blue')
lines(timevalues, predict(sp, data.frame(age = timevalues)), col = 'green')
spectra = readRDS('spectra/lichen_spectra.rds')
spec = spectra[meta(spectra)$scientificName == 'Flavoparmelia_caperata',]
spec700 = spec[, 2000]
spec_df = as.data.frame(spec)
spec_m = as.data.frame(as.matrix(spec700))
colnames(spec_m) =  'ref'
spec_m$age = spec_df$age
#spec_m = spec_m[spec_m$age <= 60,]
linear = lm(ref~age, data = spec_m)
expon = lm(log(ref)~age, data = spec_m)
sp = lm(ref ~ ns(age, df = 3), data = spec_m)
timevalues <- seq(0, 123, 1)
expon2 <- exp(predict(expon, list(age=timevalues)))
linear2 = predict(linear, list(age=timevalues))
plot(spec_m$age, spec_m$ref, pch=16, xlab = "Age (years)", ylab = "Reflectance")
#lines(timevalues, expon2,lwd=2, col = "red")
lines(timevalues, linear2, lwd=2, col = 'blue')
lines(timevalues, predict(sp, data.frame(age = timevalues)), col = 'green')
