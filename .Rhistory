df.young = df[df$year > 1990,]
df.young = classify_time(df.young, time_name = "split8", n_classes = 8,
time_span = 20, start_year = 2010)
df.young8 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df.young = classify_time(df.young, time_name = "split7", n_classes = 7,
time_span = 20, start_year = 2010)
df.young7 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split7)) == 7)
df.young = classify_time(df.young, time_name = "split6", n_classes = 6,
time_span = 20, start_year = 2010)
df.young6 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split6)) == 6)
df.young = classify_time(df.young, time_name = "split5", n_classes = 5,
time_span = 20, start_year = 2010)
df.young5 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split5)) == 5)
df.young = classify_time(df.young, time_name = "split4", n_classes = 4,
time_span = 20, start_year = 2010)
df.young4 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
table(df.young4$split4)
table(df.young4$scientificName)
df.young = classify_time(df.young, time_name = "split3", n_classes = 3,
time_span = 20, start_year = 2010)
df.young3 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split3)) == 3)
table(df.young3$split3)
table(df.young3$scientificName)
df.young = classify_time(df.young, time_name = "split2", n_classes = 2,
time_span = 20, start_year = 2010)
df.young2 = df.young %>% group_by(scientificName) %>%
filter(length(unique(split2)) == 2)
table(df.young2$split2)
table(df.young2$scientificName)
split_2_1 = as.data.frame(table(df.young2[df.young2$split2 == 1,]$scientificName))
split_2_1 = split_2_1[split_2_1$Freq > 2,]
a = as.character(split_2_1$Var1)
split_2_2 = as.data.frame(table(df.young2[df.young2$split2 == 2,]$scientificName))
split_2_2 = split_2_2[split_2_2$Freq > 2,]
b = as.character(split_2_2$Var1)
a = intersect(a,b)
a
df_20 = df[df$scientificName %in% a,]
write.csv(df_20, "metadata/20_years_2_classes.csv")
length(unique(df_20$Family))
length(unique(df_20$Order))
length(unique(df_20$Class))
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
classify_time = function(dataframe, time_name, n_classes, time_span, start_year){
x = time_span/n_classes
for (i in 1:n_classes){
if (i == 1){
dataframe$timeClass[start_year - dataframe$year <= x] = i
}
else if (i > 1) {
dataframe$timeClass[start_year - dataframe$year > (i-1)*x &
start_year - dataframe$year <= i*x] = i
}
}
names(dataframe)[names(dataframe) == "timeClass"] <- time_name
return(dataframe)
}
df.x = df[df$year > 2000,]
df.x = classify_time(df.x, time_name = "split10", n_classes = 10,
time_span = 10, start_year = 2010)
df.x10 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split10)) == 10)
df.x = classify_time(df.x, time_name = "split9", n_classes = 9,
time_span = 10, start_year = 2010)
df.x9 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split9)) == 9)
df.x = classify_time(df.x, time_name = "split8", n_classes = 8,
time_span = 10, start_year = 2010)
df.x8 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split8)) == 8)
df.x = classify_time(df.x, time_name = "split7", n_classes = 7,
time_span = 10, start_year = 2010)
df.x7 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split7)) == 7)
df.x = classify_time(df.x, time_name = "split6", n_classes = 6,
time_span = 10, start_year = 2010)
df.x6 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split6)) == 6)
df.x = classify_time(df.x, time_name = "split5", n_classes = 5,
time_span = 10, start_year = 2010)
df.x5 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split5)) == 5)
df.x = classify_time(df.x, time_name = "split4", n_classes = 4,
time_span = 10, start_year = 2010)
df.x4 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split4)) == 4)
df.x = classify_time(df.x, time_name = "split3", n_classes = 3,
time_span = 10, start_year = 2010)
df.x3 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split3)) == 3)
df.x = classify_time(df.x, time_name = "split2", n_classes = 2,
time_span = 10, start_year = 2010)
df.x2 = df.x %>% group_by(scientificName) %>%
filter(length(unique(split2)) == 2)
table(df.x2$scientificName)
library(dplyr)
################################################################################
#remove bad samples
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
table(df$scientificName)
species = as.data.frame(table(df$scientificName))
usable = species[species$Freq > 9,]
species.list = usable$Var1
species.list = as.character(usable$Var1)
df1 = df[df$scientificName == species.list[1],]
hist(df[df$scientificName == species.list[1],]$year)
?hist
hist(df[df$scientificName == species.list[1],]$year, main = species.list[1],
xlab = Year)
hist(df[df$scientificName == species.list[1],]$year, main = species.list[1],
xlab = "Year")
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year")
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10)
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960:2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960,2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 10, xlim = c(1960,2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 20, xlim = c(1960,2012))
}
2012-1960
126/2
species.list
species.2 = species.list[c(6,13),]
species.2 = species.list[6,13]
species.2 = species.list[c(6,13)]
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20)
}
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20, xlim = c(1880, 2020))
}
par(mfrow = c(2,1))
for (i in 1:length(species.2)) {
hist(df[df$scientificName == species.2[i],]$year, main = species.2[i],
xlab = "Year", breaks = 20, xlim = c(1890, 2010))
}
df.15 = df[df$scientificName %in% species.list,]
length(unique(df.15$scientificName))
length(unique(df.15$Family))
length(unique(df.15$Order)
)
length(unique(df.15$Class))
species
(70*5) + (85*5) + (100 * 10) + (150 * 20)
4775 * 100
4775 * 1000
library(dplyr)
################################################################################
#remove bad samples
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
species = as.data.frame(table(df$scientificName))
usable = species[species$Freq > 9,]
species.list = as.character(usable$Var1)
species.2 = species.list[c(6,13)]
df.15 = df[df$scientificName %in% species.list,]
View(df.15)
species.list
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 20, xlim = c(1960,2012))
}
par(mfrow = c(5, 3))
for (i in 1:length(species.list)) {
hist(df[df$scientificName == species.list[i],]$year, main = species.list[i],
xlab = "Year", breaks = 20, xlim = c(1960,2012))
}
a = df[df$scientificName == species.list[1],]
View(a)
b = df[df$scientificName == species.list[2],]
View(b)
c = df[df$scientificName == species.list[3],]
View(c)
d = df[df$scientificName == species.list[4],]
View(d)
e = df[df$scientificName == species.list[5],]
View(e)
View(b)
f = df[df$scientificName == species.list[6],]
View(f)
View(b)
g = df[df$scientificName == species.list[7],]
View(g)
h = df[df$scientificName == species.list[8],]
View(h)
i = df[df$scientificName == species.list[9],]
View(i)
j = df[df$scientificName == species.list[10],]
View(j)
k = df[df$scientificName == species.list[11],]
View(k)
l = df[df$scientificName == species.list[12],]
View(l)
m = df[df$scientificName == species.list[13],]
View(m)
n = df[df$scientificName == species.list[14],]
View(n)
o = df[df$scientificName == species.list[15],]
View(o)
flavo = df[df$Family == 'Parmeliaceae',]
View(flavo)
x = read.csv("metadata/occurrences.csv", stringsAsFactors = F)
table(x$scientificName)
fb = df[df$scientificName == 'Flavoparmelia baltimorensis',]
View(fb)
ff = df[df$scientificName == 'Flavopunctelia flaventior',]
view(ff)
View(ff)
View(df)
fs = df[df$scientificName == 'Flavopunctelia soredica',]
View(fs)
library(dplyr)
################################################################################
#remove bad samples
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
hist(df$year)
df.small = df[df$year > 1969 & df$year < 2011,]
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
mtext("Number of specimens across time")
mtext("Number of specimens across time", side = 1, cex = 1.5)
hist(df$year, xlab = "Year", main = "1880 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = 10)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = 50)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = 20)
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = 20)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = -20)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = -10)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = -13)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = -15)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
mtext("Number of specimens across time", side = 1, cex = 1.5, line = -17)
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
df.small = df[df$year > 1969 & df$year < 2011,]
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
library(corrplot)
perf = read.csv("example_outcomes/classification_example-Sheet1.csv")
perf = read.csv("example_outcomes/classification_example - Sheet1.csv")
early = read.csv("example_outcomes/classification_example - Sheet2.csv")
old = read.csv("example_outcomes/classification_example - Sheet3.csv")
?corrplot
corrplot(perf, is.corr = F, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white")
corrplot(perf, is.corr = T, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white")
View(early)
View(early)
?seq
x = seq(5,50,by=5)
x
colnames(perf) = seq(5, 50, by = 5)
View(perf)
x = seq(5, 50, by = 5)
colnames(perf) = x
rownames(perf) = x
View(perf)
perf = perf[,-1]
x = seq(5, 50, by = 5)
colnames(perf) = x
rownames(perf) = x
View(perf)
corrplot(perf, is.corr = T, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white")
corrplot(perf, is.corr = T, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white", cl.lim = c(0,1))
early = read.csv("example_outcomes/classification_example - Sheet2.csv")
early = early[,-1]
colnames(early) = x
rownames(early) = x
corrplot(early, is.corr = T, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white", cl.lim = c(0,1))
corrplot(early, is.corr = T, method = "shade", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white", cl.lim = c(0,1))
corrplot(early, is.corr = T, method = "color", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white", cl.lim = c(0,1))
corrplot(early, is.corr = T, method = "color", type = "full", title = "Perfect",
cl.pos = "n",na.label = 'square', na.label.col = "white", cl.lim = c(0,1))
corrplot(early, is.corr = F, method = "color", type = "full", title = "Perfect",
cl.pos = "n",na.label = 'square', na.label.col = "white", cl.lim = c(0,1))
View(early)
cols = colorRampPalette(c('#00F', '#F00'))
cols = colorRampPalette(c('#0000FF', '#FF0000'))
corrplot(early, is.corr = F, method = "color", type = "full", title = "Perfect",
cl.pos = "n",na.label = 'square', na.label.col = "white",
col = cols(10), cl.lim = c(0,1.1))
corrplot(early, is.corr = F, method = "square", type = "full", title = "Perfect",
cl.pos = "n",na.label = 'square', na.label.col = "white",
col = cols(10), cl.lim = c(0,1.1))
early[is.na(early)] = 0
View(early)
corrplot(early, is.corr = F, method = "square", type = "full", title = "Perfect",
cl.pos = "n")
corrplot::corrplot(early, is.corr = F, method = "square", type = "full", title = "Perfect",
cl.pos = "n")
corrplot::corrplot(early, is.corr = F, method = "square", title = "Perfect",
cl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", type = "full", title = "Perfect",
cl.pos = "n", na.label.col = "white", cl.lim = c(0,1))
corrplot::corrplot(as.matrix(early), is.corr = F, method = "square", title = "Perfect",
cl.pos = "n")
perf[is.na(perf)] = 0
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
old = read.csv("example_outcomes/classification_example - Sheet3.csv")
old = old[,-1]
colnames(old) = x
rownames(old) = x
old[is.na(old)] = 0
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
old = read.csv("example_outcomes/classification_example - Sheet3 (1).csv")
old = old[,-1]
colnames(old) = x
rownames(old) = x
old[is.na(old)] = 0
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
par(mfrow = c(1,3))
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
f = df[df$scientificName == "Flavoparmelia caperata",]
View(f)
library(spectrolab)
dir_path = system.file("extdata/spec_matrix_meta.csv", package = "spectrolab")
spec_csv = read.csv(dir_path, check.names = FALSE)
achillea_spec = as_spectra(spec_csv, name_idx = 3, meta_idxs = c(1,2) )
plot(achillea_spec)
plot(achillea_spec)
meta(achillea_spec)
a_spec = achillea_spec[meta(achillea_spec)$ident == 10526,]
par(mfrow = c(1,1))
plot(a_spec, col = 'green')
a_spec = smooth(a_spec)
plot(a_spec, col = 'darkgreen', lwd = 1.5)
plot(a_spec, col = 'green3', lwd = 1.5, ylab = "Reflectance",
xlab = "Wavelength (nm)")
plot(a_spec, col = 'green3', lwd = 3, ylab = "Reflectance",
xlab = "Wavelength (nm)")
2021-1886
################################################################################
df = read.csv("metadata/metadata_joined.csv", stringsAsFactors = F)
df = df[!df$File.Name == "",]
df = df[!is.na(df$year),]
df = df[-13,]
df = df[!df$Quality == "BAD",]
df = df[!df$Quality == "not great",]
df.small = df[df$year > 1969 & df$year < 2011,]
par(mfrow = c(2,1))
hist(df$year, xlab = "Year", main = "1880 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
hist(df$year, xlab = "Year", main = "1886 - 2012")
hist(df.small$year, xlab = "Year", main = "1970 - 2010")
library(corrplot)
cols = colorRampPalette(c('#0000FF', '#FF0000'))
perf = read.csv("example_outcomes/classification_example - Sheet1.csv")
perf = perf[,-1]
x = seq(5, 50, by = 5)
colnames(perf) = x
rownames(perf) = x
perf[is.na(perf)] = 0
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
early = read.csv("example_outcomes/classification_example - Sheet2.csv")
early = early[,-1]
colnames(early) = x
rownames(early) = x
early[is.na(early)] = 0
old = read.csv("example_outcomes/classification_example - Sheet3 (1).csv")
old = old[,-1]
colnames(old) = x
rownames(old) = x
old[is.na(old)] = 0
null = read.csv("example_outcomes/classification_example - Sheet4.csv")
null = null[,-1]
colnames(null) = x
rownames(null) = x
null[is.na(null)] = 0
par(mfrow = c(1,3))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
?corrplot
par(mfrow = c(1,4))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
par(mfrow = c(1,4))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
par(mfrow = c(4,1))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
