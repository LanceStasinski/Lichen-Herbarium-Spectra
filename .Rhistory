border = FALSE, add = TRUE)
}
vip.list = pls[[1]]
par(mfrow = c(3,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
vip_to_spec = function(x){
t.vip = t(x[,-1])
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
vip.list = pls[[1]]
par(mfrow = c(3,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Order",
ncomp = 60,
resampling = 'down',
n_iteration = 100,
include_age = T)
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
################################################################################
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
library(spectrolab)
library(lme4)
library(nlme)
library(ggplot2)
library(ggeffects)
library(sjPlot)
library(rlist)
spectra = readRDS('spectra/lichen_spectra.rds')
spectra = normalize(spectra)
#4 scans per individual cannot be treated as independent in a linear model, so
#I'm taking the mean per individual
#spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
int_r2_list = c()
slope_r2_list = c()
age_effect_list = c()
age_97.5_list = c()
age_2.5_list = c()
for(i in seq(400, 2400, 1)) {
x = toString(i)
lmm = lmer(sqrt(spec_df[, x]) ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
d = as.data.frame(VarCorr(lmm))
intercept_var = d[1,4]
slope_var = d[2,4]
residual_var = d[4,4]
total_var = sum(intercept_var, slope_var, residual_var)
int_r2 = intercept_var/total_var
int_r2_list = append(int_r2_list, int_r2)
slope_r2 = slope_var/total_var
slope_r2_list = append(slope_r2_list, slope_r2)
age_effect_list = append(age_effect_list, as.numeric(fixef(lmm)[2]))
ci = confint(lmm)
age_2.5_list = append(age_2.5_list, ci[6])
age_97.5_list = append(age_97.5_list, ci[12])
}
stats_list = list()
stats_list = list.append(stats_list, int_r2_list)
stats_list = list.append(stats_list, slope_r2_list)
stats_list = list.append(stats_list, age_effect_list)
stats_list = list.append(stats_list, age_97.5_list)
stats_list = list.append(stats_list, age_2.5_list)
saveRDS(stats_list, 'models/lmm_1_vn.rds')
wv = seq(400, 2400, 1)
plot(wv, abs(stats_list[[3]]),
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (log10(age)/sqrt(wavelength))',
ylim = c(min(stats_list[[5]]), max(stats_list[[4]])))
polygon(c(wv, rev(wv)), c(stats_list[[4]], rev(stats_list[[5]])),
col = 'grey80',
lty = 0)
lines(wv, stats_list[[3]])
plot(wv, stats_list[[1]],
type = 'l',
ylab = 'Percent variance explained',
xlab = 'Wavelength (nm)',
col = 'red',
ylim = c(0, 1))
lines(wv, stats_list[[2]], col = 'blue')
legend('topright',
c('Intercept', 'Slope'),
col = c('red', 'blue'), lty = c(1,1))
plot(wv, stats_list[[3]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (log10(age)/sqrt(wavelength))',
ylim = c(min(stats_list[[5]]), max(stats_list[[4]])))
polygon(c(wv, rev(wv)), c(stats_list[[4]], rev(stats_list[[5]])),
col = 'grey80',
lty = 0)
lines(wv, stats_list[[3]])
library(spectrolab)
library(lme4)
library(nlme)
library(ggplot2)
library(ggeffects)
library(sjPlot)
library(rlist)
spectra = readRDS('spectra/lichen_spectra.rds')
#spectra = normalize(spectra)
#4 scans per individual cannot be treated as independent in a linear model, so
#I'm taking the mean per individual
spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
int_r2_list = c()
slope_r2_list = c()
age_effect_list = c()
age_97.5_list = c()
age_2.5_list = c()
for(i in seq(400, 2400, 1)) {
x = toString(i)
lmm = lmer(sqrt(spec_df[, x]) ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
d = as.data.frame(VarCorr(lmm))
intercept_var = d[1,4]
slope_var = d[2,4]
residual_var = d[4,4]
total_var = sum(intercept_var, slope_var, residual_var)
int_r2 = intercept_var/total_var
int_r2_list = append(int_r2_list, int_r2)
slope_r2 = slope_var/total_var
slope_r2_list = append(slope_r2_list, slope_r2)
age_effect_list = append(age_effect_list, as.numeric(fixef(lmm)[2]))
ci = confint(lmm)
age_2.5_list = append(age_2.5_list, ci[6])
age_97.5_list = append(age_97.5_list, ci[12])
}
stats_list = list()
stats_list = list.append(stats_list, int_r2_list)
stats_list = list.append(stats_list, slope_r2_list)
stats_list = list.append(stats_list, age_effect_list)
stats_list = list.append(stats_list, age_97.5_list)
stats_list = list.append(stats_list, age_2.5_list)
saveRDS(stats_list, 'models/lmm_1_mean.rds')
warnings()
wv = seq(400, 2400, 1)
plot(wv, stats_list[[3]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (log10(age)/sqrt(wavelength))',
ylim = c(min(stats_list[[5]]), max(stats_list[[4]])))
polygon(c(wv, rev(wv)), c(stats_list[[4]], rev(stats_list[[5]])),
col = 'grey80',
lty = 0)
lines(wv, stats_list[[3]])
plot(wv, stats_list[[1]],
type = 'l',
ylab = 'Percent variance explained',
xlab = 'Wavelength (nm)',
col = 'red',
ylim = c(0, 1))
lines(wv, stats_list[[2]], col = 'blue')
legend('topright',
c('Intercept', 'Slope'),
col = c('red', 'blue'), lty = c(1,1))
library(spectrolab)
library(lme4)
library(nlme)
library(ggplot2)
library(ggeffects)
library(sjPlot)
library(rlist)
spectra = readRDS('spectra/lichen_spectra.rds')
#spectra = normalize(spectra)
#4 scans per individual cannot be treated as independent in a linear model, so
#I'm taking the mean per individual
#spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
spec_scaled = scale(spectra[,400], center = T, scale = T)
lmm = lmer(spec_scaled ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
AIC(lmm)
lmm2 = lmer(sqrt(spec_df[, 400]) ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
AIC(lmm2)
lmm3 = lmer(spec_scaled ~ spec_df$age + (spec_df$age|spec_df$scientificName))
spec_df$scaled_age = scale(spec_df$age, scale = T, center = T)
summary(lmm)
lmm1 = lmer(spec_scaled ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
lmm2 = lmer(sqrt(spec_df[, 400]) ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
lmm3 = lmer(spec_scaled ~ spec_df$age + (spec_df$age|spec_df$scientificName)) #fails
lmm4 = lmer(spec_scaled ~ spec_df$scaled_age + (spec_df$scaled_age|spec_df$scientificName))
lmm5 = lmer(sqrt(spec_scaled) ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
AIC(lmm1)
AIC(lmm2)
AIC(lmm3)
AIC(lmm4)
AIC(lmm5)
hist(spec_scaled)
hist(sqrt(spec_scaled))
hist(log10(spec_scaled))
lmm6 = lmer(spec_scaled ~ sqrt(spec_df$age) + (sqrt(spec_df$age)|spec_df$scientificName))
lmm7 = lmer(spec_scaled ~ spec_df$age + (spec_df$age|spec_df$scientificName))
lmm1 = lmer(spec_scaled ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
spectra = readRDS('spectra/lichen_spectra.rds')
#spectra = normalize(spectra)
#4 scans per individual cannot be treated as independent in a linear model, so
#I'm taking the mean per individual
#spectra = aggregate(spectra, by = meta(spectra)$X, mean, try_keep_txt(mean))
spec_df = as.data.frame(spectra)
int_r2_list = c()
slope_r2_list = c()
age_effect_list = c()
age_97.5_list = c()
age_2.5_list = c()
for(i in seq(400, 2400, 1)) {
x = toString(i)
spec_scaled = scale(spectra[,x], center = T, scale = T)
lmm = lmer(spec_scaled ~ log10(spec_df$age) + (log10(spec_df$age)|spec_df$scientificName))
d = as.data.frame(VarCorr(lmm))
intercept_var = d[1,4]
slope_var = d[2,4]
residual_var = d[4,4]
total_var = sum(intercept_var, slope_var, residual_var)
int_r2 = intercept_var/total_var
int_r2_list = append(int_r2_list, int_r2)
slope_r2 = slope_var/total_var
slope_r2_list = append(slope_r2_list, slope_r2)
age_effect_list = append(age_effect_list, as.numeric(fixef(lmm)[2]))
ci = confint(lmm)
age_2.5_list = append(age_2.5_list, ci[6])
age_97.5_list = append(age_97.5_list, ci[12])
}
stats_list = list()
stats_list = list.append(stats_list, int_r2_list)
stats_list = list.append(stats_list, slope_r2_list)
stats_list = list.append(stats_list, age_effect_list)
stats_list = list.append(stats_list, age_97.5_list)
stats_list = list.append(stats_list, age_2.5_list)
saveRDS(stats_list, 'models/lmm_scaled.rds')
wv = seq(400, 2400, 1)
plot(wv, stats_list[[3]],
type = 'l',
xlab = 'Wavelength (nm)',
ylab = 'Effect of age (log10(age)/sqrt(wavelength))',
ylim = c(min(stats_list[[5]]), max(stats_list[[4]])))
polygon(c(wv, rev(wv)), c(stats_list[[4]], rev(stats_list[[5]])),
col = 'grey80',
lty = 0)
lines(wv, stats_list[[3]])
plot(wv, stats_list[[1]],
type = 'l',
ylab = 'Percent variance explained',
xlab = 'Wavelength (nm)',
col = 'red',
ylim = c(0, 1))
lines(wv, stats_list[[2]], col = 'blue')
legend('topright',
c('Intercept', 'Slope'),
col = c('red', 'blue'), lty = c(1,1))
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Order",
ncomp = 57,
resampling = 'up',
n_iteration = 100,
include_age = T)
saveRDS(pls, 'models/order_age.rds')
library(spectrolab)
library(lme4)
library(nlme)
library(ggplot2)
library(ggeffects)
library(sjPlot)
library(rlist)
pls = readRDS('models/order_age.rds')
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
#standard deviations
f1 <- function(lst){
n <- length(lst);
rc <- dim(lst[[1]]);
ar1 <- array(unlist(lst), c(rc, n));
round(apply(ar1, c(1, 2), sd), 2);
}
cm.sd = f1(cm.list)
cm.sd = t(cm.sd)
cm.sd = cm.sd/rowSums(cm.avg)
rownames(cm.sd) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.sd) = colnames(as.matrix(cm.list[[1]]))
write.csv(cm.sd, file = 'figures/confusion_matrices/standard deviations/order_age__sd.csv')
#format matrix for plotting
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
#save confusion matrix
write.csv(cm.total, "figures/confusion_matrices/cm_csv/order_age.csv")
#plot confusion matrix
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
col = cols(10))
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Class",
ncomp = 60,
resampling = 'down',
n_iteration = 100,
include_age = F)
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
which.max(a.avg)
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Class",
ncomp = 24,
resampling = 'up',
n_iteration = 100,
include_age = F)
saveRDS(pls, 'models/class.rds')
accuracy = pls[[4]]
mean(accuracy)
sd(accuracy)
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
#standard deviations
f1 <- function(lst){
n <- length(lst);
rc <- dim(lst[[1]]);
ar1 <- array(unlist(lst), c(rc, n));
round(apply(ar1, c(1, 2), sd), 2);
}
cm.sd = f1(cm.list)
cm.sd = t(cm.sd)
cm.sd = cm.sd/rowSums(cm.avg)
rownames(cm.sd) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.sd) = colnames(as.matrix(cm.list[[1]]))
write.csv(cm.sd, file = 'figures/confusion_matrices/standard deviations/order_age__sd.csv')
#format matrix for plotting
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
#save confusion matrix
write.csv(cm.total, "figures/confusion_matrices/cm_csv/order_age.csv")
#plot confusion matrix
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
col = cols(10))
cm.list = pls[[3]]
cm.avg = Reduce('+', cm.list)/100
cm.avg = t(cm.avg)
cm.total = cm.avg/rowSums(cm.avg)
#standard deviations
f1 <- function(lst){
n <- length(lst);
rc <- dim(lst[[1]]);
ar1 <- array(unlist(lst), c(rc, n));
round(apply(ar1, c(1, 2), sd), 2);
}
cm.sd = f1(cm.list)
cm.sd = t(cm.sd)
cm.sd = cm.sd/rowSums(cm.avg)
rownames(cm.sd) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.sd) = colnames(as.matrix(cm.list[[1]]))
write.csv(cm.sd, file = 'figures/confusion_matrices/standard deviations/class_sd.csv')
#format matrix for plotting
cm.total = as.data.frame(cm.total)
cm.total = cm.total %>% replace_with_na_all(condition = ~.x == 0)
cm.total = as.matrix(cm.total)
rownames(cm.total) = rownames(as.matrix(cm.list[[1]]))
colnames(cm.total) = colnames(as.matrix(cm.list[[1]]))
#save confusion matrix
write.csv(cm.total, "figures/confusion_matrices/cm_csv/class.csv")
#plot confusion matrix
cols = colorRampPalette(c('white', '#fe9929'))
par(mfrow = c(1,1))
corrplot::corrplot(as.matrix(cm.total),
method = 'square',
tl.col = 'black',
cl.lim = c(0,1),
na.label = 'square',
na.label.col = 'white',
col = cols(10))
vip_to_spec = function(x){
t.vip = t(x[,-1])
colnames(t.vip) <- gsub("`", "", colnames(t.vip))
s.vip = as_spectra(t.vip)
plot(mean(s.vip), lwd = 1.5, lty = 1, ylim = c(0, 100),
ylab = "Variable Importance", xlab = "Wavelength (nm)", cex.lab = 1,
main = names(s.vip)[1])
plot_quantile(s.vip, total_prob = 0.95, col = rgb(0, 0, 0, 0.25),
border = FALSE, add = TRUE)
}
vip.list = pls[[1]]
par(mfrow = c(3,5))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
vip.list = pls[[1]]
par(mfrow = c(2,3))
for (j in 1:length(vip.list)) {
vip_to_spec(vip.list[[j]])
}
library(corrplot)
library(matrixStats)
library(naniar)
library(spectrolab)
################################################################################
#run plsda
################################################################################
spectra = readRDS('spectra/lichen_spectra.rds')
classify = readRDS("functions/plsda.rds")
pls = classify(spectra = spectra,
className = "Class",
ncomp = 60,
resampling = 'down',
n_iteration = 100,
include_age = T)
a.fit = pls[[2]]
a.total = a.fit[,-1]
a.avg = as.matrix(rowMeans(a.total))
a.sd = as.matrix(rowSds(a.total))
a.lower = a.avg - a.sd
a.higher = a.avg + a.sd
#Graph to visually choose optimal number of components
x = 1:60
par(mar = c(5.1, 4.1, 4.1, 2.1), oma = c(5.1, 4.1, 4.1, 2.1))
plot(x, a.avg, type = 'p', pch = 16, cex = .75, ylab = 'Accuracy',
xlab = 'Component', xlim = c(1,60), main = 'Accuracy for Species_ID',
ylim = c(0,1))
arrows(x, a.lower, x, a.higher,length=0.05, angle=90, code=3)
abline(v = which.max(a.avg), col = 'blue')
abline(h = max(a.avg), col = "Red")
legend('bottomright', legend = c('Mean', 'Maximum accuracy','Best component'),
pch = c(16, NA, NA), lty = c(NA, 1, 1), col = c('black', 'red', 'blue'))
which.max(a.avg)
