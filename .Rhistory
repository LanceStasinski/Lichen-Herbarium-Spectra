early = read.csv("example_outcomes/classification_example - Sheet2.csv")
early = early[,-1]
colnames(early) = x
rownames(early) = x
early[is.na(early)] = 0
old = read.csv("example_outcomes/classification_example - Sheet3 (1).csv")
old = old[,-1]
colnames(old) = x
rownames(old) = x
old[is.na(old)] = 0
null = read.csv("example_outcomes/classification_example - Sheet4.csv")
null = null[,-1]
colnames(null) = x
rownames(null) = x
null[is.na(null)] = 0
par(mfrow = c(1,3))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1)
?corrplot
par(mfrow = c(1,4))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = 0)
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
par(mfrow = c(1,4))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
par(mfrow = c(4,1))
corrplot(as.matrix(null), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(perf), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(early), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
corrplot(as.matrix(old), is.corr = T, method = "square", tl.srt = 0,
tl.col = "black", cl.pos = "n", tl.offset = 1, tl.pos = "n")
spectra_metadata = read.csv("metadata/spectra_metadata.csv",
stringsAsFactors = F)
c = spectra_metadata[spectra_metadata$scientificName == "Caloplaca flavovirescens",]
spec.files = list.files(path = "/spectra")
spec.files = list.files(path = "./spectra")
library(spectrolab)
raw_spec = read_spectra(path = spec.files, format = ".sig")
spec.files
raw_spec = read_spectra(path = "./spectra/Acarospora americana", format = ".sig")
raw_spec = read_spectra(path = "spectra/Acarospora americana", format = ".sig")
################################################################################
#read spectra
################################################################################
setwd("/spectra")
################################################################################
#read spectra
################################################################################
getwd()
raw_spec = read_spectra(path = "/spectra/Acarospora americana", format = ".sig")
raw_spec = read_spectra(path = "./spectra/Acarospora americana", format = ".sig")
raw_spec = read_spectra(path = "spectra/Acarospora americana", format = ".sig")
raw_spec = read_spectra(path = "C:/Users/istas/OneDrive/Documents/GitHub/Lichen-Herbarium-Spectra/spectra/Acarospora americana", format = ".sig")
path = "spectra/Candelaria concolor"
raw_spec = read_spectra(path = path, format = ".sig")
path = "spectra/Candelaria-concolor"
raw_spec = read_spectra(path = path, format = ".sig")
path = "spectra/Candelaria-concolor"
raw_spec = read_spectra(path = path, format = "sig")
path = "spectra/Candelaria concolor"
raw_spec = read_spectra(path = path, format = "sig")
plot(raw_spec)
install.packages("data.table")
library(data.table)
View(raw_spec)
m = as.matrix(raw_spec)
View(m)
m2 = m[!rownames(m) %like% "WR_",]
View(m2)
raw2 = as_spectra(m2)
plot(raw2)
raw3 = raw2[!rowSums(raw2 > .9),]
plot(raw3)
plot(smooth(raw3))
raw_spec = read_spectra(path = spec.files,
format = "sig",
exclude_if_matches = c("BAD", "WR"))
?match_sensors
raw4 = raw3[, 900:1100]
View(m)
raw4 = raw3[, bands(raw3, 900, 1100)]
plot(raw4)
raw4 = raw3[, bands(raw3, 960, 1020)]
plot(raw4)
raw5 = raw3[, bands(raw3, 1850, 1950)]
plot(raw5)
raw6 = match_sensors(raw3, splice_at = c(900, 1900))
plot(raw6)
plot(raw3)
plot(smooth(raw6))
plot_interactive(raw6)
plot_interactive(raw3)
raw4 = raw3[, bands(raw3, 968, 1011)]
plot_interactive(raw4)
plot_interactive(raw5)
raw7 = match_sensors(raw3, splice_at = c(970, 1893))
plot(raw7)
plot(smooth(raw7))
plot_interactive(smooth(raw7))
plot(raw3)
plot(raw4)
raw8 = match_sensors(raw3, splice_at = c(990, 1893), interpolate_wvl = 20)
plot(smooth(raw8))
raw8 = match_sensors(raw3, splice_at = c(990, 1893), interpolate_wvl = 30)
plot(smooth(raw8))
plot_interactive(smooth(raw8))
raw8 = match_sensors(raw3, splice_at = c(970, 1893), interpolate_wvl = 20)
plot(smooth(raw8))
raw8 = match_sensors(raw3, splice_at = c(990, 1900), interpolate_wvl = 20)
plot(smooth(raw8))
raw8 = match_sensors(raw3, splice_at = 990, interpolate_wvl = 20)
raw8 = match_sensors(raw3, splice_at = c(990, 1900), interpolate_wvl = 10)
plot(smooth(raw8))
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = list.dirs(path = "/spectra")
spec.dirs = list.dirs(path = "./spectra")
raw_spec = read_spectra(path = path,
format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec.dirs = spec.dirs[-1]
library(rlist)
raw_list = list()
for (i in length(spec.dirs)) {
spec = read_spectra(path = spec.dirs[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec2 = assign(paste0("spec", i), spec)
raw_list = list.append(raw_list, get('spec2'))
}
length(spec.dirs)
raw_list
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
raw_list = list()
for (i in length(spec.dirs)) {
spec = read_spectra(path = spec.dirs[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec2 = assign(paste0("spec", i), spec)
raw_list = list.append(raw_list, get("spec2"))
}
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
raw_list = list()
for (i in 1:length(spec.dirs)) {
spec = read_spectra(path = spec.dirs[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec2 = assign(paste0("spec", i), spec)
raw_list = list.append(raw_list, get("spec2"))
}
spec = read_spectra(path = spec.dirs[1], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[2], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[3], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[4], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[5], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[6], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[7], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[8], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[9], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[10], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[11], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[12], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[13], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[14], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[15], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[16], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[17], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[18], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[19], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[20], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[21], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[22], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[23], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec.dir[24]
spec.dirs[24]
plot(spec)
spec = read_spectra(path = spec.dirs[25], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[26], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[27], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[28], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[29], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[30], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec = read_spectra(path = spec.dirs[31], format = "sig",
exclude_if_matches = c("BAD", "WR"))
View(spec24)
spec24
spec23
spec30
spec2
spec.dirs
spec4
plot(spec2)
spec1
plot(spec1)
plot(spec2)
spec1 = spec1[!rowSums(spec1 > 1),]
spec1.1 = match_sensors(spec1, splice_at = c(990, 1900), interpolate_wvl = 10)
plot(spec1.1)
spec1.1
spec1.1 = match_sensors(spec1, splice_at = c(990, 1900), interpolate_wvl = 12)
spec1.1
spec2
spec2.1 = match_sensors(spec2, splice_at = c(990, 1900), interpolate_wvl = 10)
spec2.1
plot(spec2)
plot(spec2.1)
plot(smooth(spec2.1))
spec1.1 = match_sensors(spec1, splice_at = c(990, 1900), interpolate_wvl = 20)
spec1.1
spec24
plot(spec24[[1]])
plot(spec24[[2]])
?resample.spectra
spec24.1 = match_sensors(spec24[[1]], splice_at = c(990, 1900), interpolate_wvl = 10)
spec24.1
spec24.2 = resample(spec24.1, 992)
spec24.2
spec24.3 = resample(spec24.1, c(340.9:2518.3))
spec24.3
colnames(spec24.1)
colnames(as.matrix(spec24.1))
colnames(as.matrix(spec24[[2]]))
x
x = 342.4 - 340.9
y = 343.8 - 342.4
(2518.3 - 340.9)/992
spec24_2 = spec24[[2]]
spec24_2.1 = spec24_2[, bands(spec24_2, 400:2400)]
spec24_2.1
spec24_2.1 = spec24_2[, bands(spec24_2, 400, 2400)]
spec24_2.1
2399.4-400.7
(2399.4-400.7)/896
spec24_2.2 = resample(spec24_2.1, seq(400.7, 2399.4, 2.231))
spec24_2.2 = resample(spec24_2.1, seq(400.7, 2399.4, 2))
spec24_2.2
spec24_2.2 = resample(spec24_2.1, seq(400.7, 2399.4, 2.231))
spec24_2.2
spec24_1 = spec24[[1]]
spec24_1.1 = match_sensors(spec24_1, splice_at = c(990, 1900), interpolate_wvl = 10)
spec24_1.2 = spec_24_1.1[, bands(spec24_1.1, 400, 2400)]
spec24_1.2 = spec24_1.1[, bands(spec24_1.1, 400, 2400)]
spec24_1.2
spec24_1.3 = resample(spec24_1.2, seq(400.7, 2399.4, 2.231))
spec24_1.3
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900), interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
return(resampled)
}
library(spectrolab)
library(rlist)
################################################################################
#read spectra
################################################################################
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900), interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
spec_all = Reduce(combine, spec_list)
spec24 = read_spectra(path = spec.dirs2[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec24.1 = spec24[[1]]
spec24.2 = spec24[[2]]
spec24.1.1 = clean_spectra(spec24.1)
spec24.2.1 = clean_spectra(spec24.2)
spec_all = Reduce(combine, list(spec_all, spec24.1.1, spec24.2.1))
spec24
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
#spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900), interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
spec_all = Reduce(combine, spec_list)
spec_list = list()
for (i in 1:length(spec.dirs)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
spec_all = Reduce(combine, spec_list)
#Process the spectra: add metadata, trim spectra
################################################################################
#load packages
################################################################################
library(spectrolab)
library(rlist)
################################################################################
#read spectra
################################################################################
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900), interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
spec_all = Reduce(combine, spec_list)
#handle the peltigera spectra
spec24 = read_spectra(path = spec.dirs[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec24.1 = spec24[[1]]
spec24.2 = spec24[[2]]
spec24.1.1 = clean_spectra(spec24.1)
spec24.2.1 = clean_spectra(spec24.2)
spec_all = Reduce(combine, list(spec_all, spec24.1.1, spec24.2.1))
spec_all
m = as.matrix(spec_all)
View(m)
plot(spec_all)
library(spectrolab)
library(rlist)
################################################################################
#clean spectra fucntion
################################################################################
clean_spectra = function(spectra) {
#match sensor overlap
matched = match_sensors(spectra, splice_at = c(990, 1900),
interpolate_wvl = 10)
#trim spectra to 400:2400 nm
trimmed = matched[ , bands(matched, 400, 2400)]
#resample to give all spectra same number of bands. 2.231 chosen for band
#resolution because this is the average band size of 896 bands between
#400.7 and 2399.4. 896 is the lowest band count for these spectra, and the
#different spectra within this dataset may not be the same size due to a
#change in collection procedure or change in the selected parameters of on the
#instrument
resampled = resample(trimmed, seq(400.7, 2399.4, 2.231))
#remove any unlabeled white references
noWR = resampled[!rowSums(resampled > 1),]
return(noWR)
}
################################################################################
#read in and clean spectra
################################################################################
spec.dirs = list.dirs(path = "./spectra")
spec.dirs = spec.dirs[-1]
spec.dirs2 = spec.dirs[-24] #peltigera elisabethae has two sets of spectra:
#1 with 1024 bands and another with 996 bands. These spectra will be handled
#separately from the rest
spec_list = list()
for (i in 1:length(spec.dirs2)) {
#read in spectra. Exclude bad and white reference scans
raw = read_spectra(path = spec.dirs2[i], format = "sig",
exclude_if_matches = c("BAD", "WR"))
#match sensors, trim and resample spectra
clean_spec = clean_spectra(raw)
#add spectra to list of spectra
spec = assign(paste0("spec", i), clean_spec)
spec_list = list.append(spec_list, get("spec"))
}
#combine spectra into single spectra object
spec_all = Reduce(combine, spec_list)
#handle the peltigera spectra
spec24 = read_spectra(path = spec.dirs[24], format = "sig",
exclude_if_matches = c("BAD", "WR"))
spec24.1 = spec24[[1]]
spec24.2 = spec24[[2]]
spec24.1.1 = clean_spectra(spec24.1)
spec24.2.1 = clean_spectra(spec24.2)
#add peltigera spectra to full spectra
spec_all = Reduce(combine, list(spec_all, spec24.1.1, spec24.2.1))
#smooth
spec_all = smooth(spec_all)
vn = normalize(spec_all)
plot(vn)
